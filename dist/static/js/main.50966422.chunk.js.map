{"version":3,"sources":["Views/Partials/Loader.js","App.js","serviceWorker.js","index.js","api/config/Constants.js"],"names":["Loader","id","class","width","height","cx","cy","r","fill","stroke-width","stroke","stroke-miterlimit","Login","lazy","AdminHome","Home","AddProduct","App","fallback","exact","path","render","props","APP_TOKEN","notEmpty","isAdmin","to","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","API_CONSUMER","set","user_id","name","token","account_id","role_id","sessionStorage","setItem","get","userId","getItem","remove","clear","cond1","this","cond2","cond3"],"mappings":"2PAEe,SAASA,IACpB,OACI,yBAAKC,GAAG,cAAcC,MAAM,mBAAkB,yBAAKA,MAAM,WAAWC,MAAM,OAAOC,OAAO,QAAO,4BAAQF,MAAM,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,eAAa,IAAIC,OAAO,YAAW,4BAAQR,MAAM,OAAOG,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,eAAa,IAAIE,oBAAkB,KAAKD,OAAO,cCc5S,IAAME,EAAQC,gBAAK,kBAAK,sDAClBC,EAAYD,gBAAK,kBAAK,gCACtBE,EAAOF,gBAAK,kBAAK,sDACjBG,EAAaH,gBAAK,kBAAK,sDAkEdI,MA7Df,WAEE,OACQ,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KAaE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAW,SAAAC,GACT,OAASC,IAAUC,SAEhBD,IAAUE,QACX,kBAACX,EAAcQ,GACf,kBAACP,EAASO,GAHV,kBAAC,IAAD,CAAUI,GAAG,cAKnB,kBAAC,IAAD,CACEP,OAAK,EACLC,KAAK,mBACLC,OAAW,SAAAC,GACT,OAASC,IAAUC,SAEhBD,IAAUE,QACX,kBAACT,EAAeM,GAChB,kBAAC,IAAD,CAAUI,GAAG,MAHb,kBAAC,IAAD,CAAUA,GAAG,cAMnB,kBAAC,IAAD,CAAOP,OAAK,EAACC,KAAK,SAAUC,OAAQ,SAAAC,GAAK,OAAK,kBAACV,EAAUU,MACzD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAAAC,GAAK,OAAK,kBAAC,IAAD,CAAUI,GAAG,kBCtDvDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BEzI5B,oEAAO,IAEMC,EAAe,qCAMftB,EAAY,CACrBuB,IAAK,YAAsD,IAApDC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYjD,EAAiB,EAAjBA,GAAIkD,EAAa,EAAbA,QACzCC,eAAeC,QAAQ,SAAUpD,GACjCmD,eAAeC,QAAQ,QAASJ,GAChCG,eAAeC,QAAQ,UAAWN,GAClCK,eAAeC,QAAQ,UAAWF,GAClCC,eAAeC,QAAQ,OAAQL,GAC/BI,eAAeC,QAAQ,aAAcH,IAEzCI,IAAK,iBAAO,CACRC,OAAQH,eAAeI,QAAQ,UAC/BP,MAAOG,eAAeI,QAAQ,SAC9BT,QAAUK,eAAeI,QAAQ,WACjCL,QAAUC,eAAeI,QAAQ,WACjCR,KAAOI,eAAeI,QAAQ,QAC9BN,WAAYE,eAAeI,QAAQ,gBAEvCC,OAAQ,WACJL,eAAeM,SAEnB,eACI,IAAMC,EAA6B,OAArBC,KAAKN,MAAML,MACnBY,EAA6B,KAArBD,KAAKN,MAAML,MACzB,OAAOU,GAASE,GAEpB,cACI,IAAMF,EAA8B,SAAtBC,KAAKN,MAAMP,QACnBc,EAA6B,GAArBD,KAAKN,MAAMC,OACnBO,EAA8B,GAAtBF,KAAKN,MAAMH,QACzB,OAAOQ,GAASE,GAASC,M","file":"static/js/main.50966422.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Loader(){\r\n    return(\r\n        <div id=\"ftco-loader\" class=\"show fullscreen\"><svg class=\"circular\" width=\"48px\" height=\"48px\"><circle class=\"path-bg\" cx=\"24\" cy=\"24\" r=\"22\" fill=\"none\" stroke-width=\"4\" stroke=\"#eeeeee\"/><circle class=\"path\" cx=\"24\" cy=\"24\" r=\"22\" fill=\"none\" stroke-width=\"4\" stroke-miterlimit=\"10\" stroke=\"#F96D00\"/></svg></div>\r\n    )\r\n}","import React, {Suspense, lazy} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport {APP_TOKEN} from  './api/config/Constants.js'\r\nimport PageLoader from './Views/Partials/Loader';\r\n\r\n// const WhyUs = lazy(()=> import('./modules/WhyUs'));\r\n// const About = lazy(()=> import('./modules/AboutCompany'));\r\n// const Contact = lazy(()=> import('./modules/ContactUs'));\r\n// const OurGoals = lazy(()=> import('./modules/OurGoals'));\r\n// const OurPartners = lazy(()=> import('./modules/OurPartners'));\r\n// const Portfolio = lazy(()=> import('./modules/Portfolio'));\r\n// const Index = lazy(()=> import('./modules/index'));\r\n// const Services = lazy(()=> import('./modules/Services'));\r\n// const OurTechnology = lazy(()=> import('./modules/OurTechnology'));\r\n// const Editor = lazy(()=> import('./modules/editor'));\r\n\r\nconst Login = lazy(()=> import('./Views/Auth/login'));\r\nconst AdminHome = lazy(()=> import('./Views/Admin/AdminHome'));\r\nconst Home = lazy(()=> import('./Views/Home'));\r\nconst AddProduct = lazy(()=> import('./Views/Admin/AddProduct.js'));\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n \r\n  return (\r\n          <Router>\r\n            <Suspense fallback={<PageLoader />}>\r\n              <Switch>\r\n                {/* <Route exact path=\"/\" component={Index} />\r\n                <Route exact path=\"/editor\"  render={props => { return <Editor {...props.location.state} /> }}  />\r\n                <Route exact path=\"/OurTechnology\" component={OurTechnology} />\r\n                <Route exact path=\"/Services\" component={Services} />\r\n                <Route exact path=\"/Contact\" component={Contact} />\r\n                <Route exact path=\"/About\" component={About} />\r\n                <Route exact path=\"/WhyUs\" component={WhyUs} />\r\n                <Route exact path=\"/OurGoals\" component={OurGoals} />\r\n                <Route exact path=\"/OurPartners\" component={OurPartners} />\r\n                <Route exact path=\"/Portfolio\" component={Portfolio} />                \r\n                <Route exact path=\"/login\" render={props => { return <Login {...props} /> }}   />      */}\r\n                \r\n                <Route \r\n                  exact \r\n                  path=\"/\"\r\n                  render = { props => {\r\n                    return (!APP_TOKEN.notEmpty)\r\n                    ? <Redirect to=\"/login\" />\r\n                    : (APP_TOKEN.isAdmin)\r\n                    ? <AdminHome {...props} />\r\n                    : <Home {...props} /> }}\r\n                />\r\n                <Route \r\n                  exact \r\n                  path=\"/add-new-product\" \r\n                  render = { props => {\r\n                    return (!APP_TOKEN.notEmpty)\r\n                    ? <Redirect to=\"/login\" />\r\n                    : (APP_TOKEN.isAdmin)\r\n                    ? <AddProduct {...props} />\r\n                    : <Redirect to=\"/\" /> }}                    \r\n                />\r\n                \r\n                <Route exact path=\"/login\"  render={props =>  <Login {...props} /> } />\r\n                <Route exact path=\"/logout\" render={props =>  <Redirect to=\"/login\" /> }/>\r\n                \r\n                \r\n                \r\n                {/* <Route exact path=\"/home\" render={props => { return APP_TOKEN.notEmpty ? <Index {...props}/> :  <Redirect to=\"/login\" /> }} />\r\n                <Route exact path=\"/editor\"  render={props => { return APP_TOKEN.notEmpty ? <Editor {...props}  />  :  <Redirect to=\"/login\" />  }}  />\r\n                <Route exact path=\"/OurTechnology\" render={props => { return APP_TOKEN.notEmpty ? <OurTechnology  {...props}/>  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/Services\" render={props => { return APP_TOKEN.notEmpty ? <Services {...props}/>  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/Contact\" render={props => { return APP_TOKEN.notEmpty ? <Contact {...props} />  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/About\" render={props => { return APP_TOKEN.notEmpty ? <About  {...props}/>  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/WhyUs\" render={props => { return APP_TOKEN.notEmpty ? <WhyUs  {...props}/>  :  <Redirect to=\"/login\" />  }}  />\r\n                <Route exact path=\"/OurGoals\" render={props => { return APP_TOKEN.notEmpty ? <OurGoals  {...props}/>  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/OurPartners\" render={props => { return APP_TOKEN.notEmpty ? <OurPartners {...props} />  :  <Redirect to=\"/login\" />  }} />\r\n                <Route exact path=\"/Portfolio\" render={props => { return APP_TOKEN.notEmpty ? <Portfolio {...props} />  :  <Redirect to=\"/login\" />  }} />                 */}\r\n                \r\n              </Switch>\r\n            </Suspense>\r\n          </Router>      \r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const API_URL = 'http://ordernow.a1abilities.co.nz/'; // Config[KEY].API_URL;\r\nexport const AUTH_URL = 'http://ordernow.a1abilities.co.nz/'; // Config[KEY].AUTH_URL;\r\nexport const API_CONSUMER = 'http://ordernow.a1abilities.co.nz/'; // Config[KEY].API_URL;\r\n\r\n// export const API_URL = 'http://localhost:5000'; // Config[KEY].API_URL;\r\n// export const AUTH_URL = 'http://localhost:5000'; // Config[KEY].AUTH_URL;\r\n//  export const API_CONSUMER = 'http://localhost:5000'; // Config[KEY].API_URL;\r\n\r\nexport const APP_TOKEN = {\r\n    set: ({user_id, name, token, account_id, id, role_id}) => {\r\n        sessionStorage.setItem('userId', id);\r\n        sessionStorage.setItem('token', token);\r\n        sessionStorage.setItem('user_id', user_id);\r\n        sessionStorage.setItem('role_id', role_id);\r\n        sessionStorage.setItem('name', name);\r\n        sessionStorage.setItem('account_id', account_id);\r\n    },\r\n    get: () => ({\r\n        userId: sessionStorage.getItem('userId'),\r\n        token: sessionStorage.getItem('token'),\r\n        user_id : sessionStorage.getItem('user_id'),\r\n        role_id : sessionStorage.getItem('role_id'),\r\n        name : sessionStorage.getItem('name'),\r\n        account_id: sessionStorage.getItem('account_id'),\r\n    }),\r\n    remove: () => {\r\n        sessionStorage.clear();\r\n    },\r\n    get notEmpty() {\r\n        const cond1 = this.get().token !== null;\r\n        const cond2 = this.get().token !== '';\r\n        return cond1 && cond2;\r\n    },\r\n    get isAdmin() {\r\n        const cond1 = this.get().user_id == 'admin';\r\n        const cond2 = this.get().userId == 1;\r\n        const cond3 = this.get().role_id == 1;\r\n        return cond1 && cond2 && cond3;\r\n    }\r\n}"],"sourceRoot":""}