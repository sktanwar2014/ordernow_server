{"version":3,"sources":["Views/Admin/Components/OrderAcceptRejectDialog.js","Views/Admin/Report/ViewOrderReport.js"],"names":["OrderAcceptRejectDialog","open","setDialogOpen","props","setOrderList","setOrderedProductList","isUpdatable","useState","products","isSubmitting","setIsSubmitting","handleOrderConfirmation","e","a","preventDefault","productData","map","data","isComponentExist","document","querySelector","ordered_id","status","value","push","product_id","OrderAPI","orderId","order_id","date","order_date","order_status","result","orderList","orderedProducts","console","log","show","onHide","size","centered","Header","closeButton","Title","id","onSubmit","Body","class","className","length","Object","values","product","index","product_name","quantity","ordered_unit_name","price","verified_quantity","verified_unit_name","Number","verified_unit_id","unit_id","style","paddingRight","type","name","required","Footer","onClick","disabled","RESET_VALUES","toDate","Date","fromDate","orderStatus","ViewOrder","inputs","setInputs","orderedProductList","orderStatusList","setOrderStatusList","setOrderStatus","dialogOpen","orderProps","setOrderProps","isLoading","setIsLoading","useEffect","getOrderList","getOrderStatusList","handleInputChange","target","from_date","getDate","to_date","StaticAPI","for","onChange","order","filter","pro","totalProduct","rowspan","getDateInDDMMYYYY","full_name","flat_add","street_add","city","delivery_date","display"],"mappings":"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","file":"static/js/5.a1629382.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport OrderAPI from '../../../api/order.js';\r\n\r\n\r\n\r\nexport default function OrderAcceptRejectDialog({open, setDialogOpen, props, setOrderList, setOrderedProductList, isUpdatable}) {\r\n\r\n  const [products, setProducts] = useState(props.products);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  \r\n    // console.log(products);\r\n\r\n  const handleOrderConfirmation = async (e) =>{\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    try{\r\n        let productData  = [];\r\n          products.map((data)=> {\r\n            let isComponentExist = document.querySelector(`input[name=\"action-${data.ordered_id}\"]:checked`);\r\n            let status = '';\r\n            if(isComponentExist === null){\r\n              status = 5;\r\n            }else if(isComponentExist !== \"\"){\r\n              status = isComponentExist.value;\r\n            }\r\n            productData.push({\r\n                ordered_id : data.ordered_id,\r\n                product_id : data.product_id,\r\n                status :  status,\r\n            });\r\n          });\r\n        const result = await OrderAPI.handleOrderConfirmation({orderId: props.order_id, productData: productData, date : props.order_date, order_status : 3});\r\n          // console.log(productData)\r\n        setOrderList(result.orderList);            \r\n        setOrderedProductList(result.orderedProducts);\r\n        setDialogOpen(false);\r\n        setIsSubmitting(false);\r\n    }catch(e){\r\n        console.log('Error...',e);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Modal show = {open} onHide={()=>{setDialogOpen(false)}} size=\"lg\" centered >\r\n        <Modal.Header closeButton >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Product Verification\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={handleOrderConfirmation}>\r\n        <Modal.Body>\r\n          <div class=\"w-100\">            \r\n            <table className=\"unit-array-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Products </th>\r\n                  <th>Delivered Quantity</th>\r\n                  <th>Price</th>\r\n                  <th>Verified Quantity</th>\r\n                  {isUpdatable === 1 && <th>Action</th> }\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(products.length > 0 ? Object.values(products) :[]).map((product, index) => {\r\n                  // console.log(product)\r\n                    return(\r\n                      <tr class=\"text-center\">\r\n                        <td>{index + 1}</td>\r\n                        <td>{product.product_name}</td>\r\n                        <td>{product.quantity + ' ' + product.ordered_unit_name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.verified_quantity + ' ' + product.verified_unit_name}</td>\r\n                        {isUpdatable === 1 && <td>\r\n                          {(Number(product.quantity) === Number(product.verified_quantity) && (product.verified_unit_id === product.unit_id)) ? ''\r\n                           :\r\n                           <div class=\"radio\">\r\n                              <label style={{ paddingRight: '15px'}}><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"5\" class=\"mr-1\" required/>Accept</label>\r\n                              <label><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"6\" class=\"mr-1\" required/> Reject</label>\r\n                            </div>\r\n                          }\r\n                        </td>\r\n                        }\r\n                      </tr>\r\n                    )\r\n                })}\t\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {isUpdatable === 0  ?\r\n            <Button className=\"br-none\" onClick={()=>{setDialogOpen(false)}}>Close</Button>\r\n            : isUpdatable === 1 ?\r\n                <Button type=\"submit\" className=\"br-none\" disabled={isSubmitting}>Submit</Button>\r\n              :  ''}\r\n        </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect, Fragment} from 'react';\r\n\r\n//Components \r\nimport Header from '../../Partials/Header.js';\r\nimport Footer from '../../Partials/Footer.js';\r\nimport StaticAPI from '../../../api/static.js';\r\nimport OrderAPI from '../../../api/order.js';\r\nimport OrderAcceptRejectDialog from '../Components/OrderAcceptRejectDialog.js';\r\n\r\nimport {getDateInDDMMYYYY, getDate} from '../../../common/moment.js';\r\nimport CallLoader from '../../../common/Loader.js';\r\n\r\n\r\nconst RESET_VALUES = {\r\n    toDate : new Date(),\r\n    fromDate : new Date(),\r\n    orderStatus : '1',\r\n}\r\n\r\n\r\nexport default function ViewOrder() {\r\n\r\n    const [inputs, setInputs] =  useState(RESET_VALUES);\r\n\tconst [orderList, setOrderList] = useState([]);\r\n    const [orderedProductList, setOrderedProductList] = useState([]);\r\n    const [orderStatusList, setOrderStatusList]  = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [orderProps, setOrderProps] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n\t\tgetOrderList();\t\t\r\n\t\tgetOrderStatusList();\t\t\r\n    },[]);\r\n\r\n\r\n    \r\n\tconst  handleInputChange = (e) => {\r\n\t\tsetInputs({...inputs, [e.target.name]: e.target.value});\r\n\t}\r\n\r\n    const getOrderList = async () => {\r\n        setIsLoading(true);\r\n        setOrderStatus(inputs.orderStatus);\r\n        try{\r\n            const result = await OrderAPI.getOrderList({\r\n                order_status : inputs.orderStatus,\r\n                from_date : getDate(inputs.fromDate),\r\n                to_date : getDate(inputs.toDate),\r\n            });\r\n            setOrderList(result.orderList);            \r\n            setOrderedProductList(result.orderedProducts);           \r\n            setIsLoading(false);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n\r\n    const getOrderStatusList = async () => {\r\n        try{\r\n            const result = await StaticAPI.getOrderStatusList({});\r\n            setOrderStatusList(result.orderStatusList);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n      \r\n    const handleOrderConfirmation = async (data, products) =>{\r\n        setOrderProps({\r\n            order_id: data.id,\r\n            order_date : getDate(inputs.date),\r\n            products: products\r\n        });\r\n        setDialogOpen(true);\r\n    }\r\n\r\n\r\n    return(\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<section className=\"ftco-section\">\r\n                <div class=\"container\">\r\n                <h3>View Order List</h3>\r\n                <div class=\"row justify-content-center p-bottom-30\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <div class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"fromDate\">From * </label>\r\n                                                <input id=\"fromDate\" name=\"fromDate\" type=\"date\" value={getDate(inputs.fromDate)} class=\"form-control\"  onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"toDate\">To * </label>\r\n                                                <input id=\"toDate\" name=\"toDate\" type=\"date\" value={getDate(inputs.toDate)} class=\"form-control\" onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>  \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"orderStatus\">Status * </label>\r\n                                                <select id=\"orderStatus\" name=\"orderStatus\" value={inputs.orderStatus} class=\"form-control\" onChange={handleInputChange}>\r\n                                                    {(orderStatusList.length > 0 ? orderStatusList : [] ).map((data, index)=>{\r\n                                                        return(\r\n                                                            (data.id !== 4 ) ?  <option id={data.id} value={data.id} >{data.order_status}</option> : null\r\n                                                        )\r\n                                                        })\r\n                                                    }\r\n                                                </select>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-12 m-bottom-20\">\r\n                                            <div class=\"form-group\">\r\n                                                <div class=\"d-flex f-right\">\r\n                                                <button class=\"btn btn-primary px-4\" onClick={getOrderList}> Click to view</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"w-100\">\r\n                                            <table className=\"unit-array-table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Order Date</th>\r\n                                                        <th>Order Id</th>\r\n                                                        <th>Customer</th>\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Product</th> }\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Quantity</th> }\r\n                                                        {orderStatus == 2 && <th>Price</th> }\r\n                                                        <th>Address</th>\r\n                                                        {orderStatus != 1 && <th>Delivery Date</th> }\r\n                                                        {(orderStatus != 1 && orderStatus != 2)  && <th>Actions</th> }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {(orderList.length>0 ? orderList :[]).map((order, index) => {    \r\n                                                        let products = orderedProductList.filter(pro => pro.order_id === order.id);                                                    \r\n                                                        let totalProduct = products.length;                                                     \r\n                                                    return(\r\n                                                        (products.length >0 ? products :[]).map((product) =>  {\r\n                                                            return(\r\n                                                                <tr class=\"text-center\">\r\n                                                                    {totalProduct !== 0 &&                                                                    \r\n                                                                        <Fragment>                                                                            \r\n                                                                            <td rowspan={totalProduct}>{index + 1}</td>\r\n                                                                            <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.order_date)}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.order_id}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.full_name}</td>\r\n                                                                        </Fragment>\r\n                                                                    }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{product.product_name}</td> }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{`${product.quantity}  ${product.ordered_unit_name}`}</td> }\r\n                                                                    {orderStatus == 2 &&  <td>{`${product.price}`}</td>}\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>\r\n                                                                            <td rowspan={totalProduct}>{`${order.flat_add}, ${order.street_add}, ${order.city}`}</td>\r\n                                                                            {orderStatus != 1 && <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.delivery_date)}</td> }\r\n                                                                            {(orderStatus != 1 && orderStatus != 2)  && <td rowspan={totalProduct}>\r\n                                                                                    <button class={ \"alter-purchase-record\"} type=\"submit\" onClick={()=>{handleOrderConfirmation(order, products)}}> See Info </button>\r\n                                                                            </td>}\r\n                                                                        </Fragment>\r\n                                                                    }   \r\n                                                                    <div style={{display:'none'}}>{totalProduct = 0}</div>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                }\t\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    \r\n                </div>\r\n    </section>\r\n\t\t<Footer />\r\n        { dialogOpen ? \r\n            <OrderAcceptRejectDialog \r\n                open={dialogOpen} \r\n                setDialogOpen = {setDialogOpen} \r\n                props = {orderProps} \r\n                setOrderList = {setOrderList}\r\n                setOrderedProductList = {setOrderedProductList}\r\n                isUpdatable = {0}\r\n            /> \r\n            : null \r\n        }\r\n        {isLoading ?   <CallLoader />   : null  }\r\n\t</Fragment>\r\n    )\r\n}"],"sourceRoot":""}