{"version":3,"sources":["Views/Admin/Components/OrderAcceptRejectDialog.js","Views/Admin/Report/ViewOrderReport.js"],"names":["OrderAcceptRejectDialog","open","setDialogOpen","props","setOrderList","setOrderedProductList","isUpdatable","useState","products","console","log","handleOrderConfirmation","status","a","OrderAPI","orderId","order_id","order_status","date","order_date","result","orderList","orderedProducts","show","onHide","size","centered","Header","closeButton","Title","id","Body","class","className","length","Object","values","map","product","index","product_name","quantity","ordered_unit_name","price","verified_quantity","verified_unit_name","Footer","onClick","RESET_VALUES","toDate","Date","fromDate","orderStatus","ViewOrder","inputs","setInputs","orderedProductList","orderStatusList","setOrderStatusList","setOrderStatus","dialogOpen","orderProps","setOrderProps","useEffect","getOrderList","getOrderStatusList","handleInputChange","e","target","name","value","from_date","getDate","to_date","StaticAPI","data","for","type","onChange","order","filter","pro","totalProduct","rowspan","getDateInDDMMYYYY","full_name","flat_add","street_add","city","delivery_date","style","display"],"mappings":"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","file":"static/js/9.826d885b.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport OrderAPI from '../../../api/order.js';\r\n\r\n\r\n\r\nexport default function OrderAcceptRejectDialog({open, setDialogOpen, props, setOrderList, setOrderedProductList, isUpdatable}) {\r\n\r\n  const [products, setProducts] = useState(props.products);\r\n  console.log(props, products)\r\n    \r\n  const handleOrderConfirmation = async (status) =>{\r\n    try{\r\n        const result = await OrderAPI.handleOrderConfirmation({orderId: props.order_id, order_status : status, date : props.order_date});\r\n        setOrderList(result.orderList);            \r\n        setOrderedProductList(result.orderedProducts);\r\n        setDialogOpen(false);\r\n    }catch(e){\r\n        console.log('Error...',e);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Modal show = {open} onHide={()=>{setDialogOpen(false)}} size=\"lg\" centered >\r\n        <Modal.Header closeButton >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Product Verification\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div class=\"w-100\">\r\n            <table className=\"unit-array-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Products </th>\r\n                  <th>Delivered Quantity</th>\r\n                  <th>Price</th>\r\n                  <th>Verified Quantity</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(products.length > 0 ? Object.values(products) :[]).map((product, index) => {\r\n                    return(\r\n                      <tr class=\"text-center\">\r\n                        <td>{index + 1}</td>\r\n                        <td>{product.product_name}</td>\r\n                        <td>{product.quantity + ' ' + product.ordered_unit_name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.verified_quantity + ' ' + product.verified_unit_name}</td>\r\n                      </tr>\r\n                    )\r\n                })}\t\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {isUpdatable === 0  ?  \r\n            <Button className=\"br-none\" onClick={()=>{setDialogOpen(false)}}>Close</Button>\r\n            : isUpdatable === 1 ?\r\n              <Fragment>\r\n                <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(4)}}>Accept</Button>\r\n                <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(5)}}>Reject</Button>\r\n              </Fragment> :  ''}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect, Fragment} from 'react';\r\n\r\n//Components \r\nimport Header from '../../Partials/Header.js';\r\nimport Footer from '../../Partials/Footer.js';\r\nimport StaticAPI from '../../../api/static.js';\r\nimport OrderAPI from '../../../api/order.js';\r\nimport OrderAcceptRejectDialog from '../Components/OrderAcceptRejectDialog.js';\r\n\r\nimport {getDateInDDMMYYYY, getDate} from '../../../common/moment.js';\r\n\r\nconst RESET_VALUES = {\r\n    toDate : new Date(),\r\n    fromDate : new Date(),\r\n    orderStatus : '1',\r\n}\r\n\r\n\r\nexport default function ViewOrder() {\r\n\r\n    const [inputs, setInputs] =  useState(RESET_VALUES);\r\n\tconst [orderList, setOrderList] = useState([]);\r\n    const [orderedProductList, setOrderedProductList] = useState([]);\r\n    const [orderStatusList, setOrderStatusList]  = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [orderProps, setOrderProps] = useState({});\r\n\r\n\r\n    useEffect(()=>{\r\n\t\tgetOrderList();\t\t\r\n\t\tgetOrderStatusList();\t\t\r\n    },[]);\r\n\r\n\r\n    \r\n\tconst  handleInputChange = (e) => {\r\n\t\tsetInputs({...inputs, [e.target.name]: e.target.value});\r\n\t}\r\n\r\n    const getOrderList = async () => {\r\n        setOrderStatus(inputs.orderStatus);\r\n        try{\r\n            const result = await OrderAPI.getOrderList({\r\n                order_status : inputs.orderStatus,\r\n                from_date : getDate(inputs.fromDate),\r\n                to_date : getDate(inputs.toDate),\r\n            });\r\n            setOrderList(result.orderList);            \r\n            setOrderedProductList(result.orderedProducts);            \r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n\r\n    const getOrderStatusList = async () => {\r\n        try{\r\n            const result = await StaticAPI.getOrderStatusList({});\r\n            setOrderStatusList(result.orderStatusList);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n      \r\n    const handleOrderConfirmation = async (data, products) =>{\r\n        setOrderProps({\r\n            order_id: data.id,\r\n            order_date : getDate(inputs.date),\r\n            products: products\r\n        });\r\n        setDialogOpen(true);\r\n    }\r\n\r\n\r\n    return(\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<section className=\"ftco-section\">\r\n                <div class=\"container\">\r\n                <h3>View Order List</h3>\r\n                <div class=\"row justify-content-center p-bottom-30\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <div class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"fromDate\">From * </label>\r\n                                                <input id=\"fromDate\" name=\"fromDate\" type=\"date\" value={getDate(inputs.fromDate)} class=\"form-control\"  onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"toDate\">To * </label>\r\n                                                <input id=\"toDate\" name=\"toDate\" type=\"date\" value={getDate(inputs.toDate)} class=\"form-control\" onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>  \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"orderStatus\">Status * </label>\r\n                                                <select id=\"orderStatus\" name=\"orderStatus\" value={inputs.orderStatus} class=\"form-control\" onChange={handleInputChange}>\r\n                                                    {(orderStatusList.length > 0 ? orderStatusList : [] ).map((data, index)=>{\r\n                                                        return(\r\n                                                            (data.id !== 4 && data.id !== 5 ) ?  <option id={data.id} value={data.id} >{data.order_status}</option> : null\r\n                                                        )\r\n                                                        })\r\n                                                    }\r\n                                                </select>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-12 m-bottom-20\">\r\n                                            <div class=\"form-group\">\r\n                                                <div class=\"d-flex f-right\">\r\n                                                <button class=\"btn btn-primary px-4\" onClick={getOrderList}> Click to view</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"w-100\">\r\n                                            <table className=\"unit-array-table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Order Date</th>\r\n                                                        <th>Order Id</th>\r\n                                                        <th>Customer</th>\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Product</th> }\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Quantity</th> }\r\n                                                        {orderStatus == 2 && <th>Price</th> }\r\n                                                        <th>Address</th>\r\n                                                        {orderStatus != 1 && <th>Delivery Date</th> }\r\n                                                        {(orderStatus != 1 && orderStatus != 2)  && <th>Actions</th> }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {(orderList.length>0 ? orderList :[]).map((order, index) => {    \r\n                                                        let products = orderedProductList.filter(pro => pro.order_id === order.id);                                                    \r\n                                                        let totalProduct = products.length;                                                     \r\n                                                    return(\r\n                                                        (products.length >0 ? products :[]).map((product) =>  {\r\n                                                            return(\r\n                                                                <tr class=\"text-center\">\r\n                                                                    {totalProduct !== 0 &&                                                                    \r\n                                                                        <Fragment>                                                                            \r\n                                                                            <td rowspan={totalProduct}>{index + 1}</td>\r\n                                                                            <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.order_date)}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.order_id}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.full_name}</td>\r\n                                                                        </Fragment>\r\n                                                                    }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{product.product_name}</td> }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{`${product.quantity}  ${product.ordered_unit_name}`}</td> }\r\n                                                                    {orderStatus == 2 &&  <td>{`${product.price}`}</td>}\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>\r\n                                                                            <td rowspan={totalProduct}>{`${order.flat_add}, ${order.street_add}, ${order.city}`}</td>\r\n                                                                            {orderStatus != 1 && <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.delivery_date)}</td> }\r\n                                                                            {(orderStatus != 1 && orderStatus != 2)  && <td rowspan={totalProduct}>\r\n                                                                                    <button class={ \"alter-purchase-record\"} type=\"submit\" onClick={()=>{handleOrderConfirmation(order, products)}}> Check Product </button>\r\n                                                                            </td>}\r\n                                                                        </Fragment>\r\n                                                                    }   \r\n                                                                    <div style={{display:'none'}}>{totalProduct = 0}</div>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                }\t\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    \r\n                </div>\r\n    </section>\r\n\t\t<Footer />\r\n        { dialogOpen ? \r\n            <OrderAcceptRejectDialog \r\n                open={dialogOpen} \r\n                setDialogOpen = {setDialogOpen} \r\n                props = {orderProps} \r\n                setOrderList = {setOrderList}\r\n                setOrderedProductList = {setOrderedProductList}\r\n                isUpdatable = {0}\r\n            /> \r\n            : null \r\n        }\r\n\t</Fragment>\r\n    )\r\n}"],"sourceRoot":""}