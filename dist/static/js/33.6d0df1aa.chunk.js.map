{"version":3,"sources":["Views/Admin/DeliveryForm.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","api/order.js","utils/conditionChecker.js"],"names":["DeliveryForm","props","APP_TOKEN","get","userId","useState","location","state","order","productList","setProductList","extraPurchased","setExtraPurchased","isLoading","setIsLoading","isSubmitting","setIsSubmitting","purchasedStock","setPurchasedStock","extraStock","setExtraStock","useEffect","fetchDeliveryFormData","a","OrderAPI","orderId","id","order_date","getDate","result","temp","deliveryFormData","temp2","map","data","purchased_unit_id","isNullOrUndefined","Object","values","split","purchased_quantity","purchased_unit_name","cost","available_quantity","available","unit","index","Number","push","product_id","unit_id","quantity","unit_name","cost_of_each","will_give","price","selected_unit_id","uniqueExtras","extras","find","e","break_here","console","log","handleQuantityChange","target","name","document","getElementById","value","tempProd","stock","toFixed","alert","handleSubmit","preventDefault","productData","order_id","ordered_id","tracking_id","Math","floor","random","delivery_date","Date","paid_quantity","submitDeliveryDetails","window","pathname","removeAdditionalProduct","splice","class","onSubmit","getDateInDDMMYYYY","mobile","full_name","flat_add","street_add","city","pincode","className","style","minWidth","length","units","filter","colSpan","product_name","ordered_unit_name","isNotEmpty","row","type","min","step","onChange","required","disabled","selected","add_remove","onClick","undefined","p","s","ele","tempUnits","extraSelectionHandler","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","PARAMS","methodType","method","headers","authHeader","handleOrderConfirmation","payload","URL","c","axios","assign","checkError","getOrderInvoiceLatestVersion","orderVerificationByCustomer","handlePurchasedRecord","getOrderedProductList","generatePDFOfOrderedProducts","getOrderedProductListSingleDay","fetchPreviousBillingAddresss","removeSelectedAddress","getOrderList","getOrderListOfSingleDay","getCustomerOrderList","addNewOrder","module","exports"],"mappings":"0RAYe,SAASA,EAAaC,GAClBC,IAAUC,MAAMC,OAA/B,IADwC,EAEbC,mBAASJ,EAAMK,SAASC,MAAMC,OAFjB,mBAEjCA,EAFiC,aAGFH,mBAAS,KAHP,mBAGjCI,EAHiC,KAGpBC,EAHoB,OAIIL,mBAAS,IAJb,mBAIjCM,EAJiC,KAIjBC,EAJiB,OAKNP,oBAAS,GALH,mBAKjCQ,EALiC,KAKtBC,EALsB,OAMAT,oBAAS,GANT,mBAMjCU,EANiC,KAMnBC,EANmB,OAOIX,mBAAS,IAPb,mBAOjCY,EAPiC,KAOjBC,EAPiB,OAQJb,mBAAS,IARL,mBAQjCc,EARiC,KAQrBC,EARqB,KAWxCC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAqB,uCAAG,sCAAAC,EAAA,6DAC1BT,GAAa,GADa,kBAGDU,IAASF,sBAAsB,CAChDG,QAAUjB,EAAMkB,GAChBC,WAAaC,YAAQpB,EAAMmB,cALT,OAGhBE,EAHgB,OAQlBC,EARkB,YAQPD,EAAOE,kBAClBC,EATkB,YASNH,EAAOlB,gBACnBM,EAAiB,GACjBE,EAAa,GAEjBW,EAAKG,KAAI,SAACC,GACN,IAAIC,EAAuBC,4BAAkBF,EAAKC,mBAA2E,GAArDE,OAAOC,OAAQJ,EAAKC,kBAAmBI,MAAM,MACjHC,EAAuBJ,4BAAkBF,EAAKM,oBAA6E,GAAtDH,OAAOC,OAAQJ,EAAKM,mBAAoBD,MAAM,MACnHE,EAAwBL,4BAAkBF,EAAKO,qBAA+E,GAAvDJ,OAAOC,OAAQJ,EAAKO,oBAAqBF,MAAM,MACtHG,EAASN,4BAAkBF,EAAKQ,MAAiD,GAAxCL,OAAOC,OAAQJ,EAAKQ,KAAMH,MAAM,MACzEI,EAAuBP,4BAAkBF,EAAKU,WAA2D,GAA7CP,OAAOC,OAAQJ,EAAKU,UAAWL,MAAM,MAErGJ,EAAkBF,KAAI,SAACY,EAAMC,GACgB,IAAtCC,OAAOJ,EAAmBG,KACzB7B,EAAe+B,KAAK,CAChBC,WAAaF,OAAOb,EAAKe,YACzBC,QAAUH,OAAOF,GACjBM,SAAWJ,OAAOP,EAAmBM,IACrCM,UAAYX,EAAoBK,GAChCJ,KAAOK,OAAOL,EAAKI,IACnBO,aAAeN,OAAOL,EAAKI,IAAUC,OAAOP,EAAmBM,IAC/DH,mBAAqBI,OAAOJ,EAAmBG,MAIpDC,OAAOF,KAAUX,EAAKgB,UAClBhB,EAAKiB,UAAWR,EAAmBG,IAClCZ,EAAKoB,UAAYpB,EAAKiB,SACtBjB,EAAKqB,MAASR,OAAOL,EAAKI,IAAUC,OAAOP,EAAmBM,IAAWC,OAAOb,EAAKiB,UACrFjB,EAAKsB,iBAAmBtB,EAAKgB,UAE7BhB,EAAKoB,UAAY,GACjBpB,EAAKqB,MAAQ,EACbrB,EAAKsB,iBAAmBtB,EAAKgB,gBAKzCO,EAAe,GACnBzB,EAAMC,KAAI,SAACC,GACP,IAAIwB,EAAS5B,EAAK6B,MAAK,SAAAC,GAAM,OAAOA,EAAEX,aAAef,EAAKe,cAC1D,GAAGb,4BAAkBsB,GAAQ,CACzB,IAAIvB,EAAuBC,4BAAkBF,EAAKC,mBAA2E,GAArDE,OAAOC,OAAQJ,EAAKC,kBAAmBI,MAAM,MACjHC,EAAuBJ,4BAAkBF,EAAKM,oBAA6E,GAAtDH,OAAOC,OAAQJ,EAAKM,mBAAoBD,MAAM,MACnHE,EAAwBL,4BAAkBF,EAAKO,qBAA+E,GAAvDJ,OAAOC,OAAQJ,EAAKO,oBAAqBF,MAAM,MACtHG,EAASN,4BAAkBF,EAAKQ,MAAiD,GAAxCL,OAAOC,OAAQJ,EAAKQ,KAAMH,MAAM,MACzEc,EAAiBjB,4BAAkBF,EAAKmB,cAAiE,GAAhDhB,OAAOC,OAAQJ,EAAKmB,aAAcd,MAAM,MACjGI,EAAuBP,4BAAkBF,EAAKU,WAA2D,GAA7CP,OAAOC,OAAQJ,EAAKU,UAAWL,MAAM,MAErGJ,EAAkBF,KAAI,SAACY,EAAMC,GACgB,IAAtCC,OAAOJ,EAAmBG,KACzB3B,EAAW6B,KAAK,CACZC,WAAaF,OAAOb,EAAKe,YACzBC,QAAUH,OAAOF,GACjBM,SAAWJ,OAAOP,EAAmBM,IACrCM,UAAYX,EAAoBK,GAChCJ,KAAOK,OAAOL,EAAKI,IACnBO,aAAeN,OAAOM,EAAaP,IACnCH,mBAAqBI,OAAOJ,EAAmBG,SAI3DW,EAAaT,KAAKd,OAI1BhB,EAAkBD,GAClBG,EAAcD,GACdW,EAAKkB,KAAK,CAACa,WAAY,IACvBnD,EAAeoB,GACflB,EAAkB6C,GAClB3C,GAAa,GA/ES,kDAiFtBgD,QAAQC,IAAI,WAAZ,MAjFsB,0DAAH,qDAsFrBC,EAAuB,SAACJ,GAC1B,IAAIlC,EAAOkC,EAAEK,OAAOC,KAAM3B,MAAM,KAAK,GACjCY,EAAWgB,SAASC,eAAe,mBAAmB1C,GAAI2C,MAC1DxB,EAAOsB,SAASC,eAAe,iBAAiB1C,GAAI2C,MAEpDC,EAAQ,YAAO7D,GACnB6D,EAASrC,KAAI,SAACC,GACV,GAAGA,EAAKe,aAAeF,OAAOrB,GAAI,CAC9B,IAAI6C,EAAQtD,EAAe0C,MAAK,SAAAC,GAAM,OAAOA,EAAEX,aAAef,EAAKe,YAAcW,EAAEV,UAAYH,OAAOF,MAE1F,KAATA,GAA4B,KAAbM,EACXJ,OAAOI,IAAaoB,EAAM5B,oBACzBT,EAAKoB,UAAYP,OAAOI,GACxBjB,EAAKqB,OAAUgB,EAAM7B,KAAO6B,EAAMpB,SAAYJ,OAAOI,IAAWqB,QAAQ,GACxEtC,EAAKsB,iBAAmBX,IAExBX,EAAKoB,UAAY,GACjBpB,EAAKqB,MAAQ,EACbkB,MAAM,mCAEI,KAAT5B,GACLX,EAAKoB,UAAYP,OAAOI,GACxBjB,EAAKqB,MAAQ,EACbrB,EAAKsB,iBAAmB,IACN,KAAbL,IACLjB,EAAKoB,UAAY,GACjBpB,EAAKqB,MAAQ,OAIzB7C,EAAe4D,IAQbI,EAAY,uCAAG,WAAOd,GAAP,iBAAArC,EAAA,6DACjBqC,EAAEe,iBACF7D,GAAa,GACbE,GAAgB,GAHC,SAMT4D,EAAc,GAClBnE,EAAYwB,KAAI,SAACC,GACVE,4BAAkBF,EAAK2B,aACQ,IAA3Bd,OAAOb,EAAKoB,YACXsB,EAAY5B,KAAK,CACb6B,SAAWrE,EAAMkB,GACjBoD,WAAa5C,EAAKR,GAClBuB,WAAaf,EAAKe,WAClB8B,YAAmC,KAArB7C,EAAK6C,YAAqB7C,EAAK6C,YAA/B,WAAiDvE,EAAMkB,GAAvD,YAA6DQ,EAAKe,WAAlE,YAAgFf,EAAKsB,iBAArF,YAAyGwB,KAAKC,MAAoB,IAAdD,KAAKE,WACvIC,cAAgBvD,YAAQ,IAAIwD,MAC5BzD,WAAaC,YAAQpB,EAAMmB,YAC3B0D,cAAgBnD,EAAKoB,UACrBJ,QAAUhB,EAAKsB,iBACfD,MAAQrB,EAAKqB,WAnBhB,SAyBQ/B,IAAS8D,sBAAsB,CAACV,YAAaA,EAAanD,QAAUjB,EAAMkB,KAzBlF,OAyBPG,EAzBO,OA0Bbf,GAAa,GACbE,GAAgB,IACF,IAAXa,EACC0D,OAAOjF,SAASkF,SAAW,mBAE3Bf,MAAM,oBA/BG,kDAkCbX,QAAQC,IAAI,WAAZ,MAlCa,0DAAH,sDA+EZ0B,EAAuB,uCAAG,WAAO3C,GAAP,eAAAvB,EAAA,uDACxBO,EADwB,YACbrB,IACViF,OAAO5C,EAAM,GAClBpC,EAAeoB,GAHa,2CAAH,sDAO7B,OACA,kBAAC,WAAD,KACI,kBAAC,IAAD,MACI,6BAAS6D,MAAM,gBACX,yBAAKA,MAAM,aACP,yBAAKA,MAAM,8BACP,yBAAKA,MAAM,iDACP,wBAAIA,MAAM,wBAAV,iBACA,0BAAMC,SAAUlB,EAAciB,MAAM,2BAC5B,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,YACP,yBAAKA,MAAM,cACP,6CACA,yBAAKA,MAAM,UACP,4BAAKnF,EAAMqE,aAIvB,yBAAKc,MAAM,YACP,yBAAKA,MAAM,cACP,+CACA,yBAAKA,MAAM,UACP,4BAAKE,YAAkBrF,EAAMmB,gBAIzC,yBAAKgE,MAAM,YACP,yBAAKA,MAAM,cACP,+CACA,yBAAKA,MAAM,UACP,4BAAKnF,EAAMsF,WAIvB,yBAAKH,MAAM,YACP,yBAAKA,MAAM,cACP,kDACA,yBAAKA,MAAM,UACP,4BAAKnF,EAAMuF,cAIvB,yBAAKJ,MAAM,YACP,yBAAKA,MAAM,cACP,4CACA,yBAAKA,MAAM,UACP,4BAAKnF,EAAMwF,SAAW,KAAOxF,EAAMyF,WAAa,KAAOzF,EAAM0F,KAAO,KAAO1F,EAAMD,MAAQ,MAAQC,EAAM2F,YAInH,yBAAKR,MAAM,aAAX,IAAwB,6BAAxB,KACA,yBAAKA,MAAM,aACP,qDAEJ,yBAAKA,MAAM,mBACP,2BAAOS,UAAU,kBACb,2BAAOA,UAAU,iBACb,wBAAIA,UAAU,eACV,wBAAIC,MAAO,CAACC,SAAW,UAAvB,WACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,UACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,sBACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,kBACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,SACA,sCAGJ,gCACM7F,EAAY8F,OAAQ,EAAI9F,EAAa,IAAIwB,KAAI,SAACC,EAAMY,GAClD,IAAI0D,EAAQvF,EAAewF,QAAO,SAAA7C,GAAO,OAAQA,EAAEX,YAAcf,EAAKe,cACtE,OAAuB,IAApBf,EAAK2B,WAEA,4BACI,wBAAI6C,QAAS,GAAb,gCAOJ,4BACI,4BAAKxE,EAAKyE,cACV,4BAAKzE,EAAKiB,SAAU,IAAMjB,EAAK0E,mBAC/B,4BAAMC,qBAAWL,IACTA,EAAMvE,KAAI,SAAC6E,EAAKhE,GAChB,OAAQgE,EAAInE,mBAAqB,KAAOmE,EAAI1D,UAAY,SAGhE,4BACI,yBAAKuC,MAAM,UACP,2BAAOoB,KAAK,SAAS7C,KAAM,mBAAmBhC,EAAKe,WAAYoB,MAAOnC,EAAKoB,UAAWqC,MAAM,aAAajE,GAAI,mBAAmBQ,EAAKe,WAAY+D,IAAI,IAAIC,KAAK,OAAOC,SAAUlD,EAAsBmD,UAAQ,EAACC,SAA2B,IAAjBZ,EAAMD,SAC9N,4BAAQ7E,GAAI,iBAAmBQ,EAAKe,WAAaiB,KAAM,iBAAmBhC,EAAKe,WAAY0C,MAAM,aAAawB,SAAqC,IAA3BpE,OAAOb,EAAKoB,WAAkB4D,SAAUlD,EAAsBoD,SAA2B,IAAjBZ,EAAMD,QAClM,4BAASlC,MAAQ,IAAjB,mBACMmC,EAAMD,OAAS,EAAIC,EAAQ,IAAKvE,KAAI,SAACY,EAAMC,GAC7C,OACI,4BAAQpB,GAAImB,EAAKK,QAASmB,MAAOxB,EAAKK,QAASmE,SAAYxE,EAAKK,UAAYhB,EAAKgB,SAAWL,EAAKO,iBAMrH,wBAAIsD,QAA+B,IAApBxE,EAAKoF,WAAoB,EAAI,GACxC,uBAAI5F,GAAI,gBAAgBQ,EAAKe,YAAcf,EAAKqB,QAE/B,IAApBrB,EAAKoF,YACF,wBAAI3B,MAAM,kBACN,uBAAG4B,QAAS,WAAO9B,EAAwB3C,KACvC,0BAAM6C,MAAM,2BAWpD,yBAAKA,MAAM,uBACgI6B,IAArI/G,EAAYkD,MAAK,SAAA8D,GAAsF,OAApExG,EAAewF,QAAO,SAAAiB,GAAM,OAAOA,EAAEzE,aAAewE,EAAExE,cAA2BsD,OAAS,KACvH,2BAAOQ,KAAK,SAAS1C,MAAM,UAAUsB,MAAM,wBAAwB4B,QAlNlG,SAAC3D,GAClB2B,OAAOjF,SAASkF,SAAW,sBAkNqB,2BAAOuB,KAAK,SAAS1C,MAAM,SAASsB,MAAM,wBAAwByB,SAAUrG,MAIhG,yBAAK4E,MAAM,aAAX,IAAwB,6BAAxB,KACA,yBAAKA,MAAM,aACP,yDAEJ,yBAAKA,MAAM,mBACP,2BAAOS,UAAU,kBACb,2BAAOA,UAAU,iBACb,wBAAIA,UAAU,eACV,wBAAIC,MAAO,CAACC,SAAW,UAAvB,WACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,sBACA,wBAAID,MAAO,CAACC,SAAW,UAAvB,QACA,wBAAID,MAAO,CAACC,SAAW,SAAvB,UAGR,gCACM3F,EAAe4F,OAAQ,EAAI5F,EAAgB,IAAIsB,KAAI,SAACC,EAAMY,GACxD,IAAI0D,EAAQrF,EAAWsF,QAAO,SAAA7C,GAAO,OAAQA,EAAEX,YAAcf,EAAKe,cAClE,GAAGuD,EAAMD,OAAS,EACd,OACI,4BACI,4BAAKrE,EAAKyE,cACV,4BAAME,qBAAWL,IACTA,EAAMvE,KAAI,SAAC6E,EAAKhE,GAChB,OAAQgE,EAAInE,mBAAqB,KAAOmE,EAAI1D,UAAY,SAGhE,4BAAMyD,qBAAWL,IACVA,EAAMvE,KAAI,SAAC6E,EAAKhE,GAChB,OAASgE,EAAIzD,aAAeyD,EAAI3D,SAAY,SAGnD,wBAAIwC,MAAM,kBAAiB,uBAAG4B,QAAS,YA3MrE,SAACrF,GAE3B,IADczB,EAAYkD,MAAK,SAAAgE,GAAG,OAAIA,EAAI1E,aAAef,EAAKe,cAChD,CACV,IAAInB,EAAI,YAAOrB,GAkBf,GAjBAqB,EAAKkB,KAAK,CACNtB,GAAK,EACLuB,WAAaf,EAAKe,WAClB8B,YAAc,GACd4B,aAAczE,EAAKyE,aACnBxD,SAAW,GACXhB,kBAAoBD,EAAKC,kBACzByE,kBAAoB1E,EAAKO,oBACzBD,mBAAqBN,EAAKM,mBAC1BC,oBAAqBP,EAAKO,oBAC1B4C,cAAgBnD,EAAKmD,cACrB3C,KAAOR,EAAKQ,KACZ4E,WAAa,IAEjB5G,EAAeoB,GAGW,IADRb,EAAewF,QAAO,SAAA7C,GAAM,OAAOA,EAAEX,aAAef,EAAKe,cAC5DsD,OAAa,CACxB,IAAIqB,EAAS,YAAO3G,GACRE,EAAWc,KAAI,SAAC2B,GACrBA,EAAEX,aAAef,EAAKe,YACrB2E,EAAU5E,KAAK,CACXC,WAAaW,EAAEX,WACfC,QAAUU,EAAEV,QACZC,SAAWS,EAAET,SACbC,UAAYQ,EAAER,UACdV,KAAOkB,EAAElB,KACTW,aAAeO,EAAEP,aACjBV,mBAAqBiB,EAAEjB,wBAInCzB,EAAkB0G,KAuK0EC,CAAsB3F,KAAQ,iDAelI,kBAAC,IAAD,MACCrB,EAAc,kBAAC,IAAD,MAAmB,Q,0FCpZ3B,SAASiH,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYhG,OAAO8F,GAAO,OAAOH,MAAMM,KAAKH,GFIvD,CAAgBJ,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,K,qGIAxFC,EAAS,SAAC,GAAD,QAAGC,WAAH,MAA6B,CAC1CC,YADa,MAAgB,MAAhB,EAEbC,QAASC,gBAGI,KAEbC,wBAAwB,WAAD,4BAAC,mCAAAvH,EAAA,6DAAWwH,EAAX,oBAChBC,EADgB,UACPC,IADO,oDAGGC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJY,uBAGZ7G,EAHY,EAGZA,KAHY,kBAObA,GAPa,wCASpBkH,YAAW,EAAD,IATU,+DAAD,mDAAC,GAcxBC,6BAA6B,WAAD,4BAAE,mCAAA9H,EAAA,6DAAWwH,EAAX,oBACtBC,EADsB,UACbC,IADa,yDAGHC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJkB,uBAGlB7G,EAHkB,EAGlBA,KAHkB,kBAOnBA,GAPmB,wCAS1BkH,YAAW,EAAD,IATgB,+DAAF,mDAAC,GA4B7B9D,sBAAsB,WAAD,4BAAC,mCAAA/D,EAAA,6DAAWwH,EAAX,oBACdC,EADc,UACLC,IADK,kDAGKC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJU,uBAGV7G,EAHU,EAGVA,KAHU,kBAOXA,GAPW,wCASlBkH,YAAW,EAAD,IATQ,+DAAD,mDAAC,GActBE,4BAA4B,WAAD,4BAAC,mCAAA/H,EAAA,6DAAWwH,EAAX,oBACpBC,EADoB,UACXC,IADW,wDAGDC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJgB,uBAGhB7G,EAHgB,EAGhBA,KAHgB,kBAOjBA,GAPiB,wCASxBkH,YAAW,EAAD,IATc,+DAAD,mDAAC,GAe5B9H,sBAAsB,WAAD,4BAAC,mCAAAC,EAAA,6DAAWwH,EAAX,oBACdC,EADc,UACLC,IADK,kDAGKC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJU,uBAGV7G,EAHU,EAGVA,KAHU,kBAOXA,GAPW,wCASlBkH,YAAW,EAAD,IATQ,+DAAD,mDAAC,GAetBG,sBAAsB,WAAD,4BAAC,mCAAAhI,EAAA,6DAAWwH,EAAX,oBACdC,EADc,UACLC,IADK,kDAGKC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJU,uBAGV7G,EAHU,EAGVA,KAHU,kBAOXA,GAPW,wCASlBkH,YAAW,EAAD,IATQ,+DAAD,mDAAC,GAetBI,sBAAsB,WAAD,4BAAC,mCAAAjI,EAAA,6DAAWwH,EAAX,oBACdC,EADc,UACLC,IADK,kDAGKC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJU,uBAGV7G,EAHU,EAGVA,KAHU,kBAOXA,GAPW,wCASlBkH,YAAW,EAAD,IATQ,+DAAD,mDAAC,GActBK,6BAA6B,WAAD,4BAAC,mCAAAlI,EAAA,6DAAWwH,EAAX,oBACrBC,EADqB,UACZC,IADY,yDAGFC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJiB,uBAGjB7G,EAHiB,EAGjBA,KAHiB,kBAOlBA,GAPkB,wCASzBkH,YAAW,EAAD,IATe,+DAAD,mDAAC,GAc7BM,+BAA+B,WAAD,4BAAC,mCAAAnI,EAAA,6DAAWwH,EAAX,oBACvBC,EADuB,UACdC,IADc,2DAGJC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJmB,uBAGnB7G,EAHmB,EAGnBA,KAHmB,kBAOpBA,GAPoB,wCAS3BkH,YAAW,EAAD,IATiB,+DAAD,mDAAC,GAc/BO,6BAA6B,WAAD,4BAAC,mCAAApI,EAAA,6DAAWwH,EAAX,oBACrBC,EADqB,UACZC,IADY,yDAGFC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJiB,uBAGjB7G,EAHiB,EAGjBA,KAHiB,kBAOlBA,GAPkB,wCASzBkH,YAAW,EAAD,IATe,+DAAD,mDAAC,GAc7BQ,sBAAsB,WAAD,4BAAC,mCAAArI,EAAA,6DAAWwH,EAAX,oBACdC,EADc,UACLC,IADK,kDAGKC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJU,uBAGV7G,EAHU,EAGVA,KAHU,kBAOXA,GAPW,wCASlBkH,YAAW,EAAD,IATQ,+DAAD,mDAAC,GAgBtBS,aAAa,WAAD,4BAAC,mCAAAtI,EAAA,6DAAWwH,EAAX,oBACLC,EADK,UACIC,IADJ,yCAGcC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJC,uBAGD7G,EAHC,EAGDA,KAHC,kBAOFA,GAPE,wCASTkH,YAAW,EAAD,IATD,+DAAD,mDAAC,GAcbU,wBAAwB,WAAD,4BAAC,mCAAAvI,EAAA,6DAAWwH,EAAX,oBAChBC,EADgB,UACPC,IADO,oDAGGC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJY,uBAGZ7G,EAHY,EAGZA,KAHY,kBAObA,GAPa,wCASpBkH,YAAW,EAAD,IATU,+DAAD,mDAAC,GAexBW,qBAAqB,WAAD,4BAAC,mCAAAxI,EAAA,6DAAWwH,EAAX,oBACbC,EADa,UACJC,IADI,iDAGMC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJS,uBAGT7G,EAHS,EAGTA,KAHS,kBAOVA,GAPU,wCASjBkH,YAAW,EAAD,IATO,+DAAD,mDAAC,GAerBY,YAAY,WAAD,4BAAC,mCAAAzI,EAAA,6DAAWwH,EAAX,oBACJC,EADI,UACKC,IADL,wCAGeC,IAAMF,EAAK3G,OAAO8G,OAAO,GAAIV,EAAO,CAAEC,WAAY,SAAW,CAClFxG,KAAM6G,KAJA,uBAGA7G,EAHA,EAGAA,KAHA,kBAODA,GAPC,wCASRkH,YAAW,EAAD,IATF,+DAAD,mDAAC,K,iBCrOda,EAAOC,QAAU,CACbrD,WAAa,SAAC3E,GACV,OAAkB,OAAVA,QAA2BsF,IAATtF,GAA+B,KAATA","file":"static/js/33.6d0df1aa.chunk.js","sourcesContent":["import React, {useState, useEffect, Fragment} from 'react';\r\nimport { isNullOrUndefined } from 'util';\r\n//Components \r\nimport {APP_TOKEN} from '../../api/config/Constants.js';\r\nimport OrderAPI from '../../api/order.js';\r\nimport Header from '../Partials/Header.js';\r\nimport Footer from '../Partials/Footer.js';\r\n\r\nimport {getDate, getDateInDDMMYYYY} from '../../common/moment.js';\r\nimport CallLoader from '../../common/Loader.js';\r\nimport { isNotEmpty } from '../../utils/conditionChecker.js';\r\n\r\nexport default function DeliveryForm(props) {\r\n    const userId = APP_TOKEN.get().userId;\r\n    const [order, setOrder]  = useState(props.location.state.order);\r\n    const [productList, setProductList] = useState([]);\r\n    const [extraPurchased, setExtraPurchased] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [purchasedStock, setPurchasedStock] = useState([]);\r\n    const [extraStock, setExtraStock] = useState([]);\r\n    \r\n\r\n    useEffect(()=>{\r\n        fetchDeliveryFormData();\r\n    },[]);\r\n\r\n    const fetchDeliveryFormData = async () => {\r\n        setIsLoading(true);\r\n        try{\r\n            const result = await OrderAPI.fetchDeliveryFormData({\r\n                orderId : order.id,\r\n                order_date : getDate(order.order_date),\r\n            });\r\n            // console.log(result);\r\n            let temp = [...result.deliveryFormData];\r\n            let temp2 = [...result.extraPurchased];\r\n            let purchasedStock = [];\r\n            let extraStock = [];\r\n\r\n            temp.map((data) => {\r\n                let purchased_unit_id =  !(isNullOrUndefined(data.purchased_unit_id)) ? Object.values((data.purchased_unit_id).split(',')) : [];\r\n                let purchased_quantity = !(isNullOrUndefined(data.purchased_quantity)) ? Object.values((data.purchased_quantity).split(',')) : [];\r\n                let purchased_unit_name = !(isNullOrUndefined(data.purchased_unit_name)) ? Object.values((data.purchased_unit_name).split(',')) : [];\r\n                let cost = !(isNullOrUndefined(data.cost)) ? Object.values((data.cost).split(',')) : [];\r\n                let available_quantity = !(isNullOrUndefined(data.available)) ? Object.values((data.available).split(',')) : [];\r\n\r\n                purchased_unit_id.map((unit, index) => {\r\n                    if(Number(available_quantity[index]) !== 0){\r\n                        purchasedStock.push({\r\n                            product_id : Number(data.product_id),\r\n                            unit_id : Number(unit),\r\n                            quantity : Number(purchased_quantity[index]),\r\n                            unit_name : purchased_unit_name[index],\r\n                            cost : Number(cost[index]),\r\n                            cost_of_each : Number(cost[index]) / Number(purchased_quantity[index]),\r\n                            available_quantity : Number(available_quantity[index]),\r\n                        });\r\n                    }\r\n                    \r\n                    if(Number(unit) === data.unit_id){\r\n                        if(data.quantity<= available_quantity[index]){\r\n                            data.will_give = data.quantity;\r\n                            data.price = (Number(cost[index]) / Number(purchased_quantity[index])) * Number(data.quantity);\r\n                            data.selected_unit_id = data.unit_id;\r\n                        }else{\r\n                            data.will_give = '';\r\n                            data.price = 0;\r\n                            data.selected_unit_id = data.unit_id;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            let uniqueExtras = [];\r\n            temp2.map((data) => {\r\n                let extras = temp.find(e => {return e.product_id === data.product_id});\r\n                if(isNullOrUndefined(extras)){\r\n                    let purchased_unit_id =  !(isNullOrUndefined(data.purchased_unit_id)) ? Object.values((data.purchased_unit_id).split(',')) : [];\r\n                    let purchased_quantity = !(isNullOrUndefined(data.purchased_quantity)) ? Object.values((data.purchased_quantity).split(',')) : [];\r\n                    let purchased_unit_name = !(isNullOrUndefined(data.purchased_unit_name)) ? Object.values((data.purchased_unit_name).split(',')) : [];\r\n                    let cost = !(isNullOrUndefined(data.cost)) ? Object.values((data.cost).split(',')) : [];\r\n                    let cost_of_each = !(isNullOrUndefined(data.cost_of_each)) ? Object.values((data.cost_of_each).split(',')) : [];\r\n                    let available_quantity = !(isNullOrUndefined(data.available)) ? Object.values((data.available).split(',')) : [];\r\n    \r\n                    purchased_unit_id.map((unit, index) => {\r\n                        if(Number(available_quantity[index]) !== 0){\r\n                            extraStock.push({\r\n                                product_id : Number(data.product_id),\r\n                                unit_id : Number(unit),\r\n                                quantity : Number(purchased_quantity[index]),\r\n                                unit_name : purchased_unit_name[index],\r\n                                cost : Number(cost[index]),\r\n                                cost_of_each : Number(cost_of_each[index]),\r\n                                available_quantity : Number(available_quantity[index]),\r\n                            });\r\n                        }\r\n                    });\r\n                    uniqueExtras.push(data);\r\n                }\r\n            });\r\n            \r\n            setPurchasedStock(purchasedStock);\r\n            setExtraStock(extraStock);\r\n            temp.push({break_here: 1});\r\n            setProductList(temp);\r\n            setExtraPurchased(uniqueExtras);\r\n            setIsLoading(false);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n    \r\n\r\n    const handleQuantityChange = (e) => {\r\n        let id =  (e.target.name).split('-')[1];\r\n        let quantity = document.getElementById('provideQuantity-'+id).value;\r\n        let unit = document.getElementById('unitSelection-'+id).value;\r\n\r\n        let tempProd = [...productList];\r\n        tempProd.map((data) => {\r\n            if(data.product_id === Number(id)){\r\n                let stock = purchasedStock.find(e => {return e.product_id === data.product_id && e.unit_id === Number(unit)});\r\n\r\n                if(unit !== \"\" && quantity !== \"\"){\r\n                    if(Number(quantity) <= stock.available_quantity){\r\n                        data.will_give = Number(quantity);\r\n                        data.price = ((stock.cost / stock.quantity) * Number(quantity)).toFixed(2);\r\n                        data.selected_unit_id = unit;\r\n                    }else{\r\n                        data.will_give = \"\";\r\n                        data.price = 0;                        \r\n                        alert('input quantity is out of stock');\r\n                    }\r\n                }else if(unit === \"\"){\r\n                    data.will_give = Number(quantity);\r\n                    data.price = 0;\r\n                    data.selected_unit_id = \"\";\r\n                }else if(quantity === \"\"){\r\n                    data.will_give = \"\";\r\n                    data.price = 0;\r\n                }\r\n            }\r\n        })\r\n        setProductList(tempProd);\r\n    }\r\n\r\n    const handleGoBack = (e) => {\r\n        window.location.pathname = '/view-order-list';\r\n    }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n        setIsSubmitting(true);\r\n\r\n        try{\r\n            let productData = [];\r\n            productList.map((data) => {\r\n                if(isNullOrUndefined(data.break_here)){\r\n                    if(Number(data.will_give) !== 0){\r\n                        productData.push({\r\n                            order_id : order.id,\r\n                            ordered_id : data.id,\r\n                            product_id : data.product_id,\r\n                            tracking_id : data.tracking_id !== \"\" ? data.tracking_id : `O${order.id}P${data.product_id}U${data.selected_unit_id}-${Math.floor(Math.random()*10000)}`,\r\n                            delivery_date : getDate(new Date()),\r\n                            order_date : getDate(order.order_date),\r\n                            paid_quantity : data.will_give,\r\n                            unit_id : data.selected_unit_id,\r\n                            price : data.price,\r\n                        })\r\n                    }\r\n                } \r\n            });\r\n            // console.log(productData)\r\n            const result = await OrderAPI.submitDeliveryDetails({productData: productData, orderId : order.id});\r\n            setIsLoading(false);    \r\n            setIsSubmitting(false);\r\n            if(result === true){    // true = inserted\r\n                window.location.pathname = '/view-order-list';\r\n            }else{\r\n                alert('Failed Insertion');\r\n            }\r\n        }catch(e){\r\n            console.log('Error...', e);\r\n        }\r\n    }\r\n\r\n    const extraSelectionHandler = (data) =>{\r\n        let isExist = productList.find(ele => ele.product_id === data.product_id);        \r\n        if(!(isExist)){\r\n            let temp = [...productList];\r\n            temp.push({\r\n                id : 0,\r\n                product_id : data.product_id,                \r\n                tracking_id : '',\r\n                product_name: data.product_name,\r\n                quantity : '',\r\n                purchased_unit_id : data.purchased_unit_id,\r\n                ordered_unit_name : data.purchased_unit_name,\r\n                purchased_quantity : data.purchased_quantity,\r\n                purchased_unit_name: data.purchased_unit_name,\r\n                paid_quantity : data.paid_quantity,\r\n                cost : data.cost,\r\n                add_remove : 1,\r\n            });\r\n            setProductList(temp);\r\n            \r\n            let isUnitExist = purchasedStock.filter(e => {return e.product_id === data.product_id});\r\n            if(isUnitExist.length === 0){\r\n                let tempUnits = [...purchasedStock];\r\n                let units = extraStock.map((e) => {\r\n                    if(e.product_id === data.product_id){\r\n                        tempUnits.push({\r\n                            product_id : e.product_id,\r\n                            unit_id : e.unit_id,\r\n                            quantity : e.quantity,\r\n                            unit_name : e.unit_name,\r\n                            cost : e.cost,\r\n                            cost_of_each : e.cost_of_each,\r\n                            available_quantity : e.available_quantity,\r\n                        });\r\n                    }\r\n                });\r\n                setPurchasedStock(tempUnits);\r\n            }\r\n        }\r\n    }\r\n\r\n    const removeAdditionalProduct = async (index) => {\r\n        let temp = [...productList];\r\n        temp.splice(index,1);\r\n        setProductList(temp);\r\n    }\r\n    \r\n\r\n    return(\r\n    <Fragment>\r\n        <Header />\r\n            <section class=\"ftco-section\">\r\n                <div class=\"container\">\r\n                    <div class=\"row justify-content-center\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <h3 class=\"mb-4 billing-heading\">Delivery Form</h3>\r\n                            <form onSubmit={handleSubmit} class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label>Order Id: </label>\r\n                                                <div class=\"d-flex\">\r\n                                                    <h6>{order.order_id}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label>Order Date: </label>\r\n                                                <div class=\"d-flex\">\r\n                                                    <h6>{getDateInDDMMYYYY(order.order_date)}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>  \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label>Mobile No.: </label>\r\n                                                <div class=\"d-flex\">\r\n                                                    <h6>{order.mobile}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>  \r\n                                        <div class=\"col-md-4\">\r\n                                            <div class=\"form-group\">\r\n                                                <label>Customer Name: </label>\r\n                                                <div class=\"d-flex\">\r\n                                                    <h6>{order.full_name}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-8\">\r\n                                            <div class=\"form-group\">\r\n                                                <label>Address: </label>\r\n                                                <div class=\"d-flex\">\r\n                                                    <h6>{order.flat_add + ', ' + order.street_add + ', ' + order.city + ', ' + order.state + ' - ' + order.pincode}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col-md-12\"> <hr /> </div>\r\n                                        <div class=\"col-md-12\">\r\n                                            <h5>Ordered Product List</h5>\r\n                                        </div>\r\n                                        <div class=\"w-100 table-div\">\r\n                                            <table className=\"table table-td\">\r\n                                                <thead className=\"thead-primary\">\r\n                                                    <tr className=\"text-center\">\r\n                                                        <th style={{minWidth : '250px'}}>Product</th>\r\n                                                        <th style={{minWidth : '100px'}}>Demand</th>\r\n                                                        <th style={{minWidth : '150px'}}>Available in Stock</th>\r\n                                                        <th style={{minWidth : '150px'}}>Given Quantity</th>\r\n                                                        <th style={{minWidth : '150px'}}>Price</th>\r\n                                                        <th>&nbsp;</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                    <tbody >\r\n                                                        {(productList.length >0 ? productList :[]).map((data, index) => {    \r\n                                                            let units = purchasedStock.filter(e => { return (e.product_id == data.product_id)});\r\n                                                            if(data.break_here === 1){\r\n                                                                return(\r\n                                                                    <tr>\r\n                                                                        <td colSpan={6}>\r\n                                                                            Extra Products for Delivery\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            }else{\r\n                                                                return(\r\n                                                                    <tr>\r\n                                                                        <td>{data.product_name}</td>\r\n                                                                        <td>{data.quantity+ ' ' + data.ordered_unit_name}</td>\r\n                                                                        <td>{(isNotEmpty(units)) &&\r\n                                                                                units.map((row, index) => {\r\n                                                                                return( row.available_quantity + '  ' + row.unit_name + ', ' )\r\n                                                                            })}\r\n                                                                        </td>\r\n                                                                        <td>\r\n                                                                            <div class=\"d-flex\">\r\n                                                                                <input type=\"number\" name={\"provideQuantity-\"+data.product_id} value={data.will_give} class=\"cost-input\" id={\"provideQuantity-\"+data.product_id} min=\"0\" step=\"0.01\" onChange={handleQuantityChange} required disabled={units.length === 0} />\r\n                                                                                <select id={\"unitSelection-\" + data.product_id}  name={\"unitSelection-\" + data.product_id} class=\"cost-input\" required={Number(data.will_give) !== 0} onChange={handleQuantityChange} disabled={units.length === 0}>\r\n                                                                                    <option  value = \"\">Select Any One</option>\r\n                                                                                        {(units.length > 0 ? units : [] ).map((unit, index)=>{\r\n                                                                                        return(\r\n                                                                                            <option id={unit.unit_id} value={unit.unit_id} selected = {unit.unit_id === data.unit_id} >{unit.unit_name}</option>\r\n                                                                                        )\r\n                                                                                        })}\r\n                                                                                </select>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                        <td colSpan={!(data.add_remove === 1) ? 2 : 0}>\r\n                                                                            <p  id={\"productPrice-\"+data.product_id} >{data.price}</p>\r\n                                                                        </td>\r\n                                                                        {data.add_remove === 1 && \r\n                                                                            <td class=\"product-remove\">\r\n                                                                                <a onClick={() => {removeAdditionalProduct(index)}}>\r\n                                                                                    <span class=\"ion-ios-close\"></span>\r\n                                                                                </a>\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            }\r\n                                                        })}\r\n                                                    </tbody>\r\n                                                </table>                                               \r\n                                            </div>\r\n                                            <div class=\"form-group p-4\">\r\n                                                {(productList.find(p => {let stock = purchasedStock.filter(s => {return s.product_id === p.product_id}); return stock.length > 0}) === undefined)\r\n                                                    ?   <input type=\"button\" value=\"Go Back\" class=\"btn  px-4 btn-primary\" onClick={handleGoBack}/>\r\n                                                    :   <input type=\"submit\" value=\"Submit\" class=\"btn  px-4 btn-primary\" disabled={isSubmitting} />\r\n                                                }\r\n                                            </div>\r\n                                    </div>\r\n                                    <div class=\"col-md-12\"> <hr /> </div>\r\n                                    <div class=\"col-md-12\">\r\n                                        <h5>Extra Purchased Products</h5>\r\n                                    </div>\r\n                                    <div class=\"w-100 table-div\">\r\n                                        <table className=\"table table-td\">\r\n                                            <thead className=\"thead-primary\">\r\n                                                <tr className=\"text-center\">\r\n                                                    <th style={{minWidth : '350px'}}>Product</th>\r\n                                                    <th style={{minWidth : '250px'}}>Available in Stock</th>\r\n                                                    <th style={{minWidth : '200px'}}>Cost</th>\r\n                                                    <th style={{minWidth : '80px'}}>&nbsp;</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {(extraPurchased.length >0 ? extraPurchased :[]).map((data, index) => {    \r\n                                                    let units = extraStock.filter(e => { return (e.product_id == data.product_id)});\r\n                                                    if(units.length > 0){\r\n                                                        return(\r\n                                                            <tr>\r\n                                                                <td>{data.product_name}</td>\r\n                                                                <td>{(isNotEmpty(units)) &&\r\n                                                                        units.map((row, index) => {\r\n                                                                        return( row.available_quantity + '  ' + row.unit_name + ', ' )\r\n                                                                    })}\r\n                                                                </td>\r\n                                                                <td>{(isNotEmpty(units)) &&\r\n                                                                       units.map((row, index) => {\r\n                                                                       return( (row.cost_of_each * row.quantity) + ', ')\r\n                                                                    })}\r\n                                                                </td>\r\n                                                                <td class=\"product-remove\"><a onClick={()=>{extraSelectionHandler(data)}}><span>+</span></a></td>                                                     \r\n                                                            </tr>\r\n                                                        )\r\n                                                    }\r\n                                                \r\n                                                })\r\n                                            }\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </form>                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n        <Footer />\r\n        {isLoading ?   <CallLoader />   : null  }\r\n    </Fragment>\r\n    )\r\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios';\r\nimport * as c from './config/Constants';\r\nimport checkError from './config/HttpClient';\r\nimport {authHeader} from './config/AuthHeader.js';\r\n\r\nconst PARAMS = ({ methodType = 'GET' }) => ({\r\n  method: methodType,\r\n  headers: authHeader(),\r\n});\r\n\r\nexport default {\r\n\r\n  handleOrderConfirmation:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/handleOrderConfirmation`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getOrderInvoiceLatestVersion: async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getOrderInvoiceLatestVersion`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // generateInvoice:async ({...payload }) => {\r\n  //   const URL = `${c.API_CONSUMER}/order/generateInvoice`;\r\n  //   try {\r\n  //     const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n  //       data: payload,\r\n  //     }),\r\n  //   );\r\n  //     return data;\r\n  //   } catch (error) {\r\n  //     checkError(error);\r\n  //     throw error;\r\n  //   }\r\n  // },\r\n\r\n  submitDeliveryDetails:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/submitDeliveryDetails`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  orderVerificationByCustomer:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/orderVerificationByCustomer`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  fetchDeliveryFormData:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/fetchDeliveryFormData`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  handlePurchasedRecord:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/handlePurchasedRecord`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  getOrderedProductList:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getOrderedProductList`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  generatePDFOfOrderedProducts:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/generatePDFOfOrderedProducts`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getOrderedProductListSingleDay:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getOrderedProductListSingleDay`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  fetchPreviousBillingAddresss:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/fetchPreviousBillingAddresss`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  removeSelectedAddress:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/removeSelectedAddress`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n \r\n  getOrderList:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getOrderList`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getOrderListOfSingleDay:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getOrderListOfSingleDay`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  getCustomerOrderList:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/getCustomerOrderList`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  addNewOrder:async ({...payload }) => {\r\n    const URL = `${c.API_CONSUMER}/order/addNewOrder`;\r\n    try {\r\n      const { data } = await axios(URL, Object.assign({}, PARAMS({ methodType: 'POST' }), {\r\n        data: payload,\r\n      }),\r\n    );\r\n      return data;\r\n    } catch (error) {\r\n      checkError(error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n};","module.exports = {\r\n    isNotEmpty : (data) => {\r\n        return (data !==  null && data !== undefined && data !== \"\");\r\n    }\r\n}"],"sourceRoot":""}