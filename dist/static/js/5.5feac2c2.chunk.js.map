{"version":3,"sources":["Views/Admin/Components/OrderAcceptRejectDialog.js","Views/Admin/ViewOrder.js"],"names":["OrderAcceptRejectDialog","open","setDialogOpen","props","setOrderList","setOrderedProductList","isUpdatable","useState","products","prodIds","Set","map","dist","ordered_id","console","log","join","handleOrderConfirmation","e","a","preventDefault","productData","data","push","product_id","status","document","querySelector","value","OrderAPI","orderId","order_id","date","order_date","order_status","result","orderList","orderedProducts","show","onHide","size","centered","Header","closeButton","Title","id","onSubmit","Body","class","className","length","Object","values","product","index","product_name","quantity","ordered_unit_name","price","verified_quantity","verified_unit_name","style","paddingRight","type","name","required","Footer","onClick","RESET_VALUES","Date","orderStatus","ViewOrder","inputs","setInputs","orderedProductList","orderStatusList","setOrderStatusList","setOrderStatus","dialogOpen","orderProps","setOrderProps","useEffect","getOrderListOfSingleDay","getOrderStatusList","handleInputChange","target","getDate","StaticAPI","handleGenerateInvoice","alert","for","onChange","order","filter","pro","totalProduct","rowspan","getDateInDDMMYYYY","full_name","flat_add","street_add","city","delivery_date","to","pathname","state","display"],"mappings":"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","file":"static/js/5.5feac2c2.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport OrderAPI from '../../../api/order.js';\r\n\r\n\r\n\r\nexport default function OrderAcceptRejectDialog({open, setDialogOpen, props, setOrderList, setOrderedProductList, isUpdatable}) {\r\n\r\n  const [products, setProducts] = useState(props.products);\r\n  const prodIds = [...new Set(products.map(dist => dist.ordered_id))];\r\n  console.log(props, products, prodIds, prodIds.join())\r\n    \r\n  const handleOrderConfirmation = async (e) =>{\r\n    e.preventDefault();\r\n    try{\r\n        let productData  = [];\r\n          products.map((data)=> {\r\n            productData.push({\r\n                ordered_id : data.ordered_id,\r\n                product_id : data.product_id,\r\n                status :  document.querySelector(`input[name=\"action-${data.ordered_id}\"]:checked`).value,\r\n            });\r\n          });\r\n        const result = await OrderAPI.handleOrderConfirmation({orderId: props.order_id, productData: productData, date : props.order_date, order_status : 3});\r\n\r\n        setOrderList(result.orderList);            \r\n        setOrderedProductList(result.orderedProducts);\r\n        setDialogOpen(false);\r\n    }catch(e){\r\n        console.log('Error...',e);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Modal show = {open} onHide={()=>{setDialogOpen(false)}} size=\"lg\" centered >\r\n        <Modal.Header closeButton >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Product Verification\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={handleOrderConfirmation}>\r\n        <Modal.Body>\r\n          <div class=\"w-100\">            \r\n            <table className=\"unit-array-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Products </th>\r\n                  <th>Delivered Quantity</th>\r\n                  <th>Price</th>\r\n                  <th>Verified Quantity</th>\r\n                  {isUpdatable === 1 && <th>Action</th> }\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(products.length > 0 ? Object.values(products) :[]).map((product, index) => {\r\n                    return(\r\n                      <tr class=\"text-center\">\r\n                        <td>{index + 1}</td>\r\n                        <td>{product.product_name}</td>\r\n                        <td>{product.quantity + ' ' + product.ordered_unit_name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.verified_quantity + ' ' + product.verified_unit_name}</td>\r\n                        {isUpdatable === 1 && <td>\r\n                              <div class=\"radio\">\r\n                                <label style={{ paddingRight: '15px'}}><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"5\" class=\"mr-1\" required/>Accept</label>\r\n                                <label><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"6\" class=\"mr-1\" required/> Reject</label>\r\n                              </div>\r\n                        </td>\r\n                        }\r\n                      </tr>\r\n                    )\r\n                })}\t\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {isUpdatable === 0  ?\r\n            <Button className=\"br-none\" onClick={()=>{setDialogOpen(false)}}>Close</Button>\r\n            : isUpdatable === 1 ?\r\n              // <Fragment>\r\n                // <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(4)}}>Accept</Button>\r\n                // <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(5)}}>Reject</Button>\r\n                <Button type=\"submit\" className=\"br-none\">Submit</Button>\r\n              // </Fragment> \r\n              :  ''}\r\n        </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect, Fragment} from 'react';\r\nimport {Link} from  'react-router-dom';\r\nimport pdfmake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\n\r\n//Components \r\nimport Header from '../Partials/Header.js';\r\nimport Footer from '../Partials/Footer.js';\r\nimport OrderAPI from '../../api/order.js';\r\nimport StaticAPI from '../../api/static.js';\r\nimport OrderAcceptRejectDialog from './Components/OrderAcceptRejectDialog.js';\r\n\r\n\r\nimport {getDateInDDMMYYYY, getDate} from '../../common/moment.js';\r\n\r\nconst RESET_VALUES = {\r\n    date : new Date(),\r\n    orderStatus : '1',\r\n}\r\n\r\n\r\nexport default function ViewOrder(props) {\r\n\r\n    const [inputs, setInputs] =  useState(RESET_VALUES);\r\n\tconst [orderList, setOrderList] = useState([]);\r\n    const [orderedProductList, setOrderedProductList] = useState([]);\r\n    const [orderStatusList, setOrderStatusList]  = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [orderProps, setOrderProps] = useState({});\r\n\r\n    useEffect(()=>{\r\n        getOrderListOfSingleDay();\r\n        getOrderStatusList();\r\n    },[]);\r\n\r\n\r\n    \r\n\tconst  handleInputChange = (e) => {\r\n\t\tsetInputs({...inputs, [e.target.name]: e.target.value});\r\n\t}\r\n\r\n    const getOrderListOfSingleDay = async () => {\r\n        setOrderStatus(inputs.orderStatus);\r\n\r\n        try{\r\n            const result = await OrderAPI.getOrderListOfSingleDay({\r\n                order_status : inputs.orderStatus,\r\n                date : getDate(inputs.date),\r\n            });\r\n            setOrderList(result.orderList);            \r\n            setOrderedProductList(result.orderedProducts);            \r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n    const getOrderStatusList = async () => {\r\n        try{\r\n            const result = await StaticAPI.getOrderStatusList({});\r\n            setOrderStatusList(result.orderStatusList);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n\r\n    const handleGenerateInvoice = async (data) =>{\r\n        alert('Development under process !')\r\n        // pdfmake.vfs = pdfFonts.pdfMake.vfs;\r\n        // try{\r\n        //     const result = await OrderAPI.generateInvoice({orderId : data.id, order_status: data.status});\r\n        //     pdfmake.createPdf(result).download();\r\n        // }catch(e){\r\n        //     console.log('Error...',e);\r\n        // }\r\n    }\r\n\r\n    \r\n    const handleOrderConfirmation = async (data, products) =>{\r\n        setOrderProps({\r\n            order_id: data.id,\r\n            order_date : getDate(inputs.date),\r\n            products: products\r\n        });\r\n        setDialogOpen(true);\r\n    }\r\n\r\n    return(\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<section className=\"ftco-section\">\r\n                <div class=\"container\">\r\n                <h3>Modify Orders</h3>\r\n                <div class=\"row justify-content-center p-bottom-30\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <div class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"date\">Date * </label>\r\n                                                <input id=\"date\" name=\"date\" type=\"date\" value={getDate(inputs.date)} class=\"form-control\"  onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"orderStatus\">Status * </label>\r\n                                                <select id=\"orderStatus\" name=\"orderStatus\" value={inputs.orderStatus} class=\"form-control\" onChange={handleInputChange}>\r\n                                                    {(orderStatusList.length > 0 ? orderStatusList : [] ).map((data, index)=>{\r\n                                                        return(\r\n                                                          (data.id !== 4 ) ?  <option id={data.id} value={data.id} >{data.order_status}</option>: null\r\n                                                        )\r\n                                                        })\r\n                                                    }\r\n                                                </select>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-12 m-bottom-20\">\r\n                                            <div class=\"form-group\">\r\n                                                <div class=\"d-flex f-right\">\r\n                                                <button class=\"btn btn-primary px-4\" onClick={getOrderListOfSingleDay}> Click to view</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"w-100\">\r\n                                            <table className=\"unit-array-table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Order Date</th>\r\n                                                        <th>Order Id</th>\r\n                                                        <th>Customer</th>\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Product</th> }\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Quantity</th> }\r\n                                                        {orderStatus == 2 && <th>Price</th> }\r\n                                                        <th>Address</th>\r\n                                                        {orderStatus != 1 && <th>Delivery Date</th> }\r\n                                                        {orderStatus != 2 && <th>Action</th> }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {(orderList.length>0 ? orderList :[]).map((order, index) => {\r\n                                                    let products = orderedProductList.filter(pro => pro.order_id === order.id);                                                    \r\n                                                    let totalProduct = products.length;                                                    \r\n                                                    return(\r\n                                                        (products.length >0 ? products :[]).map((product) =>  {\r\n                                                            return(\r\n                                                                <tr class=\"text-center\">\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>                                                                            \r\n                                                                            <td rowspan={totalProduct}>{index + 1}</td>\r\n                                                                            <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.order_date)}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.order_id}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.full_name}</td>\r\n                                                                        </Fragment>\r\n                                                                    }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{product.product_name}</td> }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{`${product.quantity}  ${product.ordered_unit_name}`}</td> }\r\n                                                                    {orderStatus == 2 &&  <td>{`${product.price}`}</td>}\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>\r\n                                                                            <td rowspan={totalProduct}>{`${order.flat_add}, ${order.street_add}, ${order.city}`}</td>\r\n                                                                            {orderStatus != 1 && <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.delivery_date)}</td> }\r\n                                                                            <td rowspan={totalProduct}>\r\n                                                                                {orderStatus  == 1 ? <Link to={{pathname :'/delivery-form', state : {order: order, products: products}}}>Click to delivered</Link> :\r\n                                                                                 orderStatus  == 3 ?\r\n                                                                                    order.status == 3 ?\r\n                                                                                    <button class={ \"alter-purchase-record\"} type=\"submit\" onClick={()=>{handleOrderConfirmation(order, products)}}> See Info </button>\r\n                                                                                   :\r\n                                                                                    (order.status  == 4) ?\r\n                                                                                    <button class=\"alter-purchase-record\" type=\"submit\" onClick={()=>{handleGenerateInvoice(order)}}> See Invoice </button> : ''\r\n                                                                                   :''\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        </Fragment>\r\n                                                                    }   \r\n                                                                    <div style={{display:'none'}}>{totalProduct = 0}</div>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                }\t\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    \r\n                </div>\r\n    </section>\r\n\t\t<Footer />\r\n            { dialogOpen ? \r\n                <OrderAcceptRejectDialog \r\n                    open={dialogOpen} \r\n                    setDialogOpen = {setDialogOpen} \r\n                    props = {orderProps} \r\n                    setOrderList = {setOrderList}\r\n                    setOrderedProductList = {setOrderedProductList}\r\n                    isUpdatable = {1}\r\n                /> \r\n                : null \r\n            }\r\n\t</Fragment>\r\n    )\r\n}"],"sourceRoot":""}