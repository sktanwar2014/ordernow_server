{"version":3,"sources":["Views/Admin/Components/OrderAcceptRejectDialog.js","Views/Admin/ViewOrder.js"],"names":["OrderAcceptRejectDialog","open","setDialogOpen","props","setOrderList","setOrderedProductList","isUpdatable","useState","products","console","log","handleOrderConfirmation","status","a","OrderAPI","orderId","order_id","order_status","date","order_date","result","orderList","orderedProducts","show","onHide","size","centered","Header","closeButton","Title","id","Body","class","className","length","Object","values","map","product","index","product_name","quantity","ordered_unit_name","price","verified_quantity","verified_unit_name","Footer","onClick","RESET_VALUES","Date","orderStatus","ViewOrder","inputs","setInputs","orderedProductList","orderStatusList","setOrderStatusList","setOrderStatus","dialogOpen","orderProps","setOrderProps","useEffect","getOrderListOfSingleDay","getOrderStatusList","handleInputChange","e","target","name","value","getDate","StaticAPI","handleGenerateInvoice","data","pdfmake","vfs","pdfFonts","pdfMake","generateInvoice","createPdf","download","for","type","onChange","order","filter","pro","totalProduct","rowspan","getDateInDDMMYYYY","full_name","flat_add","street_add","city","delivery_date","to","pathname","state","style","display"],"mappings":"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","file":"static/js/10.3c31d896.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport OrderAPI from '../../../api/order.js';\r\n\r\n\r\n\r\nexport default function OrderAcceptRejectDialog({open, setDialogOpen, props, setOrderList, setOrderedProductList, isUpdatable}) {\r\n\r\n  const [products, setProducts] = useState(props.products);\r\n  console.log(props, products)\r\n    \r\n  const handleOrderConfirmation = async (status) =>{\r\n    try{\r\n        const result = await OrderAPI.handleOrderConfirmation({orderId: props.order_id, order_status : status, date : props.order_date});\r\n        setOrderList(result.orderList);            \r\n        setOrderedProductList(result.orderedProducts);\r\n        setDialogOpen(false);\r\n    }catch(e){\r\n        console.log('Error...',e);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Modal show = {open} onHide={()=>{setDialogOpen(false)}} size=\"lg\" centered >\r\n        <Modal.Header closeButton >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Product Verification\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div class=\"w-100\">\r\n            <table className=\"unit-array-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Products </th>\r\n                  <th>Delivered Quantity</th>\r\n                  <th>Price</th>\r\n                  <th>Verified Quantity</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(products.length > 0 ? Object.values(products) :[]).map((product, index) => {\r\n                    return(\r\n                      <tr class=\"text-center\">\r\n                        <td>{index + 1}</td>\r\n                        <td>{product.product_name}</td>\r\n                        <td>{product.quantity + ' ' + product.ordered_unit_name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.verified_quantity + ' ' + product.verified_unit_name}</td>\r\n                      </tr>\r\n                    )\r\n                })}\t\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {isUpdatable === 0  ?  \r\n            <Button className=\"br-none\" onClick={()=>{setDialogOpen(false)}}>Close</Button>\r\n            : isUpdatable === 1 ?\r\n              <Fragment>\r\n                <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(4)}}>Accept</Button>\r\n                <Button className=\"br-none\" onClick={()=>{handleOrderConfirmation(5)}}>Reject</Button>\r\n              </Fragment> :  ''}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect, Fragment} from 'react';\r\nimport {Link} from  'react-router-dom';\r\nimport pdfmake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\n\r\n//Components \r\nimport Header from '../Partials/Header.js';\r\nimport Footer from '../Partials/Footer.js';\r\nimport OrderAPI from '../../api/order.js';\r\nimport StaticAPI from '../../api/static.js';\r\nimport OrderAcceptRejectDialog from './Components/OrderAcceptRejectDialog.js';\r\n\r\n\r\nimport {getDateInDDMMYYYY, getDate} from '../../common/moment.js';\r\n\r\nconst RESET_VALUES = {\r\n    date : new Date(),\r\n    orderStatus : '1',\r\n}\r\n\r\n\r\nexport default function ViewOrder(props) {\r\n\r\n    const [inputs, setInputs] =  useState(RESET_VALUES);\r\n\tconst [orderList, setOrderList] = useState([]);\r\n    const [orderedProductList, setOrderedProductList] = useState([]);\r\n    const [orderStatusList, setOrderStatusList]  = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [orderProps, setOrderProps] = useState({});\r\n\r\n        useEffect(()=>{\r\n        getOrderListOfSingleDay();\r\n        getOrderStatusList();\r\n    },[]);\r\n\r\n\r\n    \r\n\tconst  handleInputChange = (e) => {\r\n\t\tsetInputs({...inputs, [e.target.name]: e.target.value});\r\n\t}\r\n\r\n    const getOrderListOfSingleDay = async () => {\r\n        setOrderStatus(inputs.orderStatus);\r\n\r\n        try{\r\n            const result = await OrderAPI.getOrderListOfSingleDay({\r\n                order_status : inputs.orderStatus,\r\n                date : getDate(inputs.date),\r\n            });\r\n            setOrderList(result.orderList);            \r\n            setOrderedProductList(result.orderedProducts);            \r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n    const getOrderStatusList = async () => {\r\n        try{\r\n            const result = await StaticAPI.getOrderStatusList({});\r\n            setOrderStatusList(result.orderStatusList);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n\r\n    const handleGenerateInvoice = async (data) =>{\r\n        pdfmake.vfs = pdfFonts.pdfMake.vfs;\r\n        try{\r\n            const result = await OrderAPI.generateInvoice({orderId : data.id, order_status: data.status});\r\n            pdfmake.createPdf(result).download();\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n    \r\n    const handleOrderConfirmation = async (data, products) =>{\r\n        setOrderProps({\r\n            order_id: data.id,\r\n            order_date : getDate(inputs.date),\r\n            products: products\r\n        });\r\n        setDialogOpen(true);\r\n    }\r\n\r\n    return(\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<section className=\"ftco-section\">\r\n                <div class=\"container\">\r\n                <h3>Modify Orders</h3>\r\n                <div class=\"row justify-content-center p-bottom-30\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <div class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"date\">Date * </label>\r\n                                                <input id=\"date\" name=\"date\" type=\"date\" value={getDate(inputs.date)} class=\"form-control\"  onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"orderStatus\">Status * </label>\r\n                                                <select id=\"orderStatus\" name=\"orderStatus\" value={inputs.orderStatus} class=\"form-control\" onChange={handleInputChange}>\r\n                                                    {(orderStatusList.length > 0 ? orderStatusList : [] ).map((data, index)=>{\r\n                                                        return(\r\n                                                          (data.id !== 4 && data.id !== 5 ) ?  <option id={data.id} value={data.id} >{data.order_status}</option>: null\r\n                                                        )\r\n                                                        })\r\n                                                    }\r\n                                                </select>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-12 m-bottom-20\">\r\n                                            <div class=\"form-group\">\r\n                                                <div class=\"d-flex f-right\">\r\n                                                <button class=\"btn btn-primary px-4\" onClick={getOrderListOfSingleDay}> Click to view</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"w-100\">\r\n                                            <table className=\"unit-array-table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Order Date</th>\r\n                                                        <th>Order Id</th>\r\n                                                        <th>Customer</th>\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Product</th> }\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Quantity</th> }\r\n                                                        {orderStatus == 2 && <th>Price</th> }\r\n                                                        <th>Address</th>\r\n                                                        {orderStatus != 1 && <th>Delivery Date</th> }\r\n                                                        {orderStatus != 2 && <th>Action</th> }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {(orderList.length>0 ? orderList :[]).map((order, index) => {\r\n                                                    let products = orderedProductList.filter(pro => pro.order_id === order.id);                                                    \r\n                                                    let totalProduct = products.length;                                                    \r\n                                                    return(\r\n                                                        (products.length >0 ? products :[]).map((product) =>  {\r\n                                                            return(\r\n                                                                <tr class=\"text-center\">\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>                                                                            \r\n                                                                            <td rowspan={totalProduct}>{index + 1}</td>\r\n                                                                            <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.order_date)}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.order_id}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.full_name}</td>\r\n                                                                        </Fragment>\r\n                                                                    }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{product.product_name}</td> }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{`${product.quantity}  ${product.ordered_unit_name}`}</td> }\r\n                                                                    {orderStatus == 2 &&  <td>{`${product.price}`}</td>}\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>\r\n                                                                            <td rowspan={totalProduct}>{`${order.flat_add}, ${order.street_add}, ${order.city}`}</td>\r\n                                                                            {orderStatus != 1 && <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.delivery_date)}</td> }\r\n                                                                            <td rowspan={totalProduct}>\r\n                                                                                {orderStatus  == 1 ? <Link to={{pathname :'/delivery-form', state : {order: order, products: products}}}>Click to delivered</Link> :\r\n                                                                                 orderStatus  == 3 ?\r\n                                                                                    order.status == 3 ?\r\n                                                                                    <button class={ \"alter-purchase-record\"} type=\"submit\" onClick={()=>{handleOrderConfirmation(order, products)}}> Check Product </button>\r\n                                                                                   :\r\n                                                                                    (order.status  == 4 || order.status  == 5) ?\r\n                                                                                    <button class=\"alter-purchase-record\" type=\"submit\" onClick={()=>{handleGenerateInvoice(order)}}> Generate Invoice </button> : ''\r\n                                                                                   :''\r\n                                                                                }\r\n                                                                                \r\n                                                                            </td>\r\n                                                                        </Fragment>\r\n                                                                    }   \r\n                                                                    <div style={{display:'none'}}>{totalProduct = 0}</div>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                }\t\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    \r\n                </div>\r\n    </section>\r\n\t\t<Footer />\r\n            { dialogOpen ? \r\n                <OrderAcceptRejectDialog \r\n                    open={dialogOpen} \r\n                    setDialogOpen = {setDialogOpen} \r\n                    props = {orderProps} \r\n                    setOrderList = {setOrderList}\r\n                    setOrderedProductList = {setOrderedProductList}\r\n                    isUpdatable = {1}\r\n                /> \r\n                : null \r\n            }\r\n\t</Fragment>\r\n    )\r\n}"],"sourceRoot":""}