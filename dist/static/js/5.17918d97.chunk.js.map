{"version":3,"sources":["Views/Admin/ViewOrder.js","Views/Admin/Components/OrderAcceptRejectDialog.js"],"names":["RESET_VALUES","date","Date","orderStatus","ViewOrder","props","useState","inputs","setInputs","orderList","setOrderList","orderedProductList","setOrderedProductList","orderStatusList","setOrderStatusList","setOrderStatus","dialogOpen","setDialogOpen","orderProps","setOrderProps","isLoading","setIsLoading","useEffect","getOrderListOfSingleDay","getOrderStatusList","handleInputChange","e","target","name","value","a","OrderAPI","order_status","getDate","result","orderedProducts","console","log","StaticAPI","handleGenerateInvoice","data","pdfmake","vfs","pdfFonts","pdfMake","generateInvoice","orderId","id","createPdf","open","handleOrderConfirmation","products","order_id","order_date","className","class","for","type","onChange","length","map","index","onClick","order","filter","pro","totalProduct","product","rowspan","getDateInDDMMYYYY","full_name","product_name","quantity","ordered_unit_name","price","flat_add","street_add","city","delivery_date","to","pathname","state","status","style","display","isUpdatable","OrderAcceptRejectDialog","isSubmitting","setIsSubmitting","preventDefault","productData","push","ordered_id","product_id","document","querySelector","show","onHide","size","centered","Header","closeButton","Title","onSubmit","Body","Object","values","verified_quantity","verified_unit_name","paddingRight","required","Footer","disabled"],"mappings":"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","file":"static/js/5.17918d97.chunk.js","sourcesContent":["import React, {useState, useEffect, Fragment} from 'react';\r\nimport {Link} from  'react-router-dom';\r\nimport pdfmake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\n\r\n//Components \r\nimport Header from '../Partials/Header.js';\r\nimport Footer from '../Partials/Footer.js';\r\nimport OrderAPI from '../../api/order.js';\r\nimport StaticAPI from '../../api/static.js';\r\nimport OrderAcceptRejectDialog from './Components/OrderAcceptRejectDialog.js';\r\nimport CallLoader from '../../common/Loader.js';\r\n\r\n\r\nimport {getDateInDDMMYYYY, getDate} from '../../common/moment.js';\r\n\r\nconst RESET_VALUES = {\r\n    date : new Date(),\r\n    orderStatus : '1',\r\n}\r\n\r\n\r\nexport default function ViewOrder(props) {\r\n\r\n    const [inputs, setInputs] =  useState(RESET_VALUES);\r\n\tconst [orderList, setOrderList] = useState([]);\r\n    const [orderedProductList, setOrderedProductList] = useState([]);\r\n    const [orderStatusList, setOrderStatusList]  = useState([]);\r\n    const [orderStatus, setOrderStatus] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [orderProps, setOrderProps] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n    useEffect(()=>{\r\n        getOrderListOfSingleDay();\r\n        getOrderStatusList();\r\n    },[]);\r\n\r\n\r\n    \r\n\tconst  handleInputChange = (e) => {\r\n\t\tsetInputs({...inputs, [e.target.name]: e.target.value});\r\n\t}\r\n\r\n    const getOrderListOfSingleDay = async () => {\r\n        setOrderStatus(inputs.orderStatus);\r\n        setIsLoading(true);\r\n\r\n        try{\r\n            const result = await OrderAPI.getOrderListOfSingleDay({\r\n                order_status : inputs.orderStatus,\r\n                date : getDate(inputs.date),\r\n            });\r\n            setOrderList(result.orderList);            \r\n            setOrderedProductList(result.orderedProducts); \r\n            setIsLoading(false);\r\n\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n    const getOrderStatusList = async () => {\r\n        try{\r\n            const result = await StaticAPI.getOrderStatusList({});\r\n            setOrderStatusList(result.orderStatusList);\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n\r\n    const handleGenerateInvoice = async (data) =>{\r\n        setIsLoading(true);\r\n\r\n        pdfmake.vfs = pdfFonts.pdfMake.vfs;\r\n        try{\r\n            const result = await OrderAPI.generateInvoice({orderId : data.id});\r\n            pdfmake.createPdf(result).open();\r\n            setIsLoading(false);\r\n\r\n        }catch(e){\r\n            console.log('Error...',e);\r\n        }\r\n    }\r\n\r\n    \r\n    const handleOrderConfirmation = async (data, products) =>{\r\n        setOrderProps({\r\n            order_id: data.id,\r\n            order_date : getDate(inputs.date),\r\n            products: products\r\n        });\r\n        setDialogOpen(true);\r\n    }\r\n\r\n    return(\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<section className=\"ftco-section\">\r\n                <div class=\"container\">\r\n                <h3>Modify Orders</h3>\r\n                <div class=\"row justify-content-center p-bottom-30\">\r\n                        <div class=\"col-xl-12 ftco-animate fadeInUp ftco-animated\">\r\n                            <div class=\"p-5 bg-light b-top-dark\">\r\n                                    <div class=\"row align-items-end\">\r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"date\">Date * </label>\r\n                                                <input id=\"date\" name=\"date\" type=\"date\" value={getDate(inputs.date)} class=\"form-control\"  onChange={handleInputChange} />\r\n                                            </div>\r\n                                        </div>   \r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"orderStatus\">Status * </label>\r\n                                                <select id=\"orderStatus\" name=\"orderStatus\" value={inputs.orderStatus} class=\"form-control\" onChange={handleInputChange}>\r\n                                                    {(orderStatusList.length > 0 ? orderStatusList : [] ).map((data, index)=>{\r\n                                                        return(\r\n                                                          (data.id !== 4 ) ?  <option id={data.id} value={data.id} >{data.order_status}</option>: null\r\n                                                        )\r\n                                                        })\r\n                                                    }\r\n                                                </select>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"col-md-12 m-bottom-20\">\r\n                                            <div class=\"form-group\">\r\n                                                <div class=\"d-flex f-right\">\r\n                                                <button class=\"btn btn-primary px-4\" onClick={getOrderListOfSingleDay}> Click to view</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> \r\n                                        <div class=\"w-100\">\r\n                                            <table className=\"unit-array-table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Order Date</th>\r\n                                                        <th>Order Id</th>\r\n                                                        <th>Customer</th>\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Product</th> }\r\n                                                        {(orderStatus == 2 || orderStatus  == 1) && <th>Quantity</th> }\r\n                                                        {orderStatus == 2 && <th>Price</th> }\r\n                                                        <th>Address</th>\r\n                                                        {orderStatus != 1 && <th>Delivery Date</th> }\r\n                                                        {orderStatus != 2 && <th>Action</th> }\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {(orderList.length>0 ? orderList :[]).map((order, index) => {\r\n                                                    let products = orderedProductList.filter(pro => pro.order_id === order.id);                                                    \r\n                                                    let totalProduct = products.length;                                                    \r\n                                                    return(\r\n                                                        (products.length >0 ? products :[]).map((product) =>  {\r\n                                                            return(\r\n                                                                <tr class=\"text-center\">\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>                                                                            \r\n                                                                            <td rowspan={totalProduct}>{index + 1}</td>\r\n                                                                            <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.order_date)}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.order_id}</td>\r\n                                                                            <td rowspan={totalProduct}>{order.full_name}</td>\r\n                                                                        </Fragment>\r\n                                                                    }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{product.product_name}</td> }\r\n                                                                    {(orderStatus == 2 || orderStatus  == 1) && <td>{`${product.quantity}  ${product.ordered_unit_name}`}</td> }\r\n                                                                    {orderStatus == 2 &&  <td>{`${product.price}`}</td>}\r\n                                                                    {totalProduct !== 0 &&\r\n                                                                        <Fragment>\r\n                                                                            <td rowspan={totalProduct}>{`${order.flat_add}, ${order.street_add}, ${order.city}`}</td>\r\n                                                                            {orderStatus != 1 && <td rowspan={totalProduct}>{getDateInDDMMYYYY(order.delivery_date)}</td> }\r\n                                                                            <td rowspan={totalProduct}>\r\n                                                                                {orderStatus  == 1 ? <Link to={{pathname :'/delivery-form', state : {order: order, products: products}}}>Click to delivered</Link> :\r\n                                                                                 orderStatus  == 3 ?\r\n                                                                                    order.status == 3 ?\r\n                                                                                    <button class={ \"alter-purchase-record\"} type=\"submit\" onClick={()=>{handleOrderConfirmation(order, products)}}> See Info </button>\r\n                                                                                   :\r\n                                                                                    (order.status  == 4) ?\r\n                                                                                    <button class=\"alter-purchase-record\" type=\"submit\" onClick={()=>{handleGenerateInvoice(order)}}> See Invoice </button> : ''\r\n                                                                                   :''\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        </Fragment>\r\n                                                                    }   \r\n                                                                    <div style={{display:'none'}}>{totalProduct = 0}</div>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                }\t\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    \r\n                </div>\r\n    </section>\r\n\t\t<Footer />\r\n            { dialogOpen ? \r\n                <OrderAcceptRejectDialog \r\n                    open={dialogOpen} \r\n                    setDialogOpen = {setDialogOpen} \r\n                    props = {orderProps} \r\n                    setOrderList = {setOrderList}\r\n                    setOrderedProductList = {setOrderedProductList}\r\n                    isUpdatable = {1}\r\n                /> \r\n                : null \r\n            }\r\n            {isLoading ?   <CallLoader />   : null  }\r\n\t</Fragment>\r\n    )\r\n}","import React, {useState, Fragment} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport OrderAPI from '../../../api/order.js';\r\n\r\n\r\n\r\nexport default function OrderAcceptRejectDialog({open, setDialogOpen, props, setOrderList, setOrderedProductList, isUpdatable}) {\r\n\r\n  const [products, setProducts] = useState(props.products);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  \r\n    \r\n  const handleOrderConfirmation = async (e) =>{\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    try{\r\n        let productData  = [];\r\n          products.map((data)=> {\r\n            productData.push({\r\n                ordered_id : data.ordered_id,\r\n                product_id : data.product_id,\r\n                status :  document.querySelector(`input[name=\"action-${data.ordered_id}\"]:checked`).value,\r\n            });\r\n          });\r\n        const result = await OrderAPI.handleOrderConfirmation({orderId: props.order_id, productData: productData, date : props.order_date, order_status : 3});\r\n\r\n        setOrderList(result.orderList);            \r\n        setOrderedProductList(result.orderedProducts);\r\n        setDialogOpen(false);\r\n        setIsSubmitting(false);\r\n    }catch(e){\r\n        console.log('Error...',e);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <Modal show = {open} onHide={()=>{setDialogOpen(false)}} size=\"lg\" centered >\r\n        <Modal.Header closeButton >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Product Verification\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <form onSubmit={handleOrderConfirmation}>\r\n        <Modal.Body>\r\n          <div class=\"w-100\">            \r\n            <table className=\"unit-array-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Products </th>\r\n                  <th>Delivered Quantity</th>\r\n                  <th>Price</th>\r\n                  <th>Verified Quantity</th>\r\n                  {isUpdatable === 1 && <th>Action</th> }\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(products.length > 0 ? Object.values(products) :[]).map((product, index) => {\r\n                    return(\r\n                      <tr class=\"text-center\">\r\n                        <td>{index + 1}</td>\r\n                        <td>{product.product_name}</td>\r\n                        <td>{product.quantity + ' ' + product.ordered_unit_name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.verified_quantity + ' ' + product.verified_unit_name}</td>\r\n                        {isUpdatable === 1 && <td>\r\n                              <div class=\"radio\">\r\n                                <label style={{ paddingRight: '15px'}}><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"5\" class=\"mr-1\" required/>Accept</label>\r\n                                <label><input type=\"radio\" name={\"action-\"+product.ordered_id} value=\"6\" class=\"mr-1\" required/> Reject</label>\r\n                              </div>\r\n                        </td>\r\n                        }\r\n                      </tr>\r\n                    )\r\n                })}\t\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {isUpdatable === 0  ?\r\n            <Button className=\"br-none\" onClick={()=>{setDialogOpen(false)}}>Close</Button>\r\n            : isUpdatable === 1 ?\r\n                <Button type=\"submit\" className=\"br-none\" disabled={isSubmitting}>Submit</Button>\r\n              :  ''}\r\n        </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n    );\r\n  }\r\n  "],"sourceRoot":""}